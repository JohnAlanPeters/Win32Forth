<?xml version="1.0"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<meta name="GENERATOR" content="dexh v03">
<meta name="ProgId" content="FrontPage.Editor.Document">
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<title>
</title><style><!--
h1           { font-family: Tahoma; font-size: 24pt; font-weight: bold }
h2           { font-family: Tahoma; font-size: 18pt; font-weight: bold } -->
</style>
</head>
<body><h1 align="center">
<a href="mailto:win32forth@yahoogroups.com?subject=DOC:Doc error in $Id: W32fdexh.f,v 1.8 2008/12/23 21:12:06 camilleforth Exp $">
<img border="0" src="../TELLUS.gif" align="left" width="32" height="32"></a>
<img border="0" src="../FORTHPRO.gif"
width="32" height="32">&nbsp;&nbsp;Win32Forth</h1>
<hr /><h1>Controls -- Classes for standard windows controls.
</h1><hr /><a name="EditControl"></a>
<h2>EditControl class
</h2><pre><b><a name="0">:Class EditControl &lt;Super CONTROL
</a></b></pre><p>Class for Edit controls.
An edit control is a rectangular control window typically used in a dialog
box to permit the user to enter and edit text by typing on the keyboard.
</p><pre><b><a name="1">:M ClassInit: &nbsp;&nbsp;( -- )
</a></b></pre><p>Initialise the class.
</p><pre><b><a name="2">:M StartSize: &nbsp;&nbsp;( -- width height )
</a></b></pre><p>Get the start size of the control. Default size is 100 x 25.
</p><pre><b><a name="3">:M WindowStyle: ( -- Style )
</a></b></pre><p>Get the window style of the control. Default style is:
WS_BORDER, WS_TABSTOP and ES_AUTOHSCROLL.
</p><pre><b><a name="4">:M Start: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( Parent -- )
</a></b></pre><p>Create the control.
</p><pre><b><a name="5">:M SetWmChar: &nbsp;&nbsp;( pWmChar -- )
</a></b></pre><p>Install the WM_CHAR filter function.
</p><pre><b><a name="6">:M SetWmKeyDown: ( pWmKeyDown -- )
</a></b></pre><p>Install the WM_KEYDOWN filter function.
</p><p>Install these filter functions if you want to capture certain keys, like
Return or F3, or whatever.
</p><pre><b><a name="7">:M SetWmKillFocus: ( pWmKillFocus -- )
</a></b></pre><p>Install the WM_KILLFOCUS filter function.
</p><pre><b><a name="8">:M SubClass: &nbsp;&nbsp;&nbsp;( hWnd Parent -- )
</a></b></pre><p>Subclass this control.
</p><pre><b><a name="9">;Class
</a></b></pre><p>End of EditControl class
</p><a name="ComboControl"></a>
<h2>ComboControl class
</h2><pre><b><a name="10">:Class ComboControl &lt;Super CONTROL
</a></b></pre><p>Class for editable combo box controls.
</p><pre><b><a name="11">:M StartSize: &nbsp;&nbsp;( -- width height )
</a></b></pre><p>Get the start size of the control
</p><pre><b><a name="12">:M WindowStyle: ( -- Style )
</a></b></pre><p>Get the window style of the control. The default style is:
CBS_DROPDOWN, WS_VSCROLL, WS_TABSTOP, WS_VISIBLE and ES_AUTOHSCROLL.
</p><pre><b><a name="13">:M SetWmChar: &nbsp;&nbsp;( pWmChar -- )
</a></b></pre><p>install the WM_CHAR filter function for the EditControl of the combo box.
</p><pre><b><a name="14">:M SetWmKeyDown: ( pWmKeyDown -- )
</a></b></pre><p>install the WM_KEYDOWN filter function for the EditControl of the combo box.
</p><pre><b><a name="15">:M SetWmKillFocus: ( pWmKillFocus -- )
</a></b></pre><p>install the WM_KILLFOCUS filter function for the EditControl of the combo box.
</p><pre><b><a name="16">:M InsertString: ( adr len -- )
</a></b></pre><p>Insert a string into the combo box
</p><pre><b><a name="17">:M GetString: &nbsp;&nbsp;( adr index -- )
</a></b></pre><p>Use: GetString: to get indexed items out of the combo box string list
Use: GetText: to get the current combo box string.
</p><pre><b><a name="18">:M GetCount: &nbsp;&nbsp;&nbsp;( -- n1 )
</a></b></pre><p>Use: GetCount: to get the count of items in the combo box string list.
</p><pre><b><a name="19">:M Start: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( Parent -- )
</a></b></pre><p>Create the control.
</p><pre><b><a name="20">;Class
</a></b></pre><p>End of ComboControl class
</p><a name="ComboListControl"></a>
<h2>ComboListControl class
</h2><pre><b><a name="21">:Class ComboListControl &lt;Super ComboControl
</a></b></pre><p>Class for select only combo box controls.
</p><pre><b><a name="22">:M WindowStyle: ( -- Style )
</a></b></pre><p>Get the window style of the control. The default style is: CBS_DROPDOWNLIST.
</p><pre><b><a name="23">;Class
</a></b></pre><p>End of ComboListControl class
</p><a name="ListControl"></a>
<h2>ListControl class
</h2><pre><b><a name="24">:Class ListControl &lt;Super CONTROL
</a></b></pre><p>Class for list box controls.
</p><pre><b><a name="25">:M WindowStyle: ( -- Style )
</a></b></pre><p>Get the window style of the control. The default style is: WS_VSCROLL,
LBS_NOTIFY, LBS_NOINTEGRALHEIGHT and WS_TABSTOP.
</p><pre><b><a name="26">:M Start: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( Parent -- )
</a></b></pre><p>Create the control.
</p><pre><b><a name="27">;Class
</a></b></pre><p>End of ListControlControl class
</p><a name="GroupControl"></a>
<h2>GroupControl control class
</h2><pre><b><a name="28">:Class GroupControl &lt;Super CONTROL
</a></b></pre><p>Class for group controls.
</p><pre><b><a name="29">:M WindowStyle: ( -- Style )
</a></b></pre><p>Get the window style of the control. The default style is: BS_GROUPBOX.
</p><pre><b><a name="30">:M Start: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( Parent -- )
</a></b></pre><p>Create the control.
</p><pre><b><a name="31">;Class
</a></b></pre><p>End of GroupControl class
</p><a name="StaticControl"></a>
<h2>StaticControl control class
</h2><pre><b><a name="32">:Class StaticControl &lt;Super CONTROL
</a></b></pre><p>Class for static controls.
</p><pre><b><a name="33">:M Start: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( Parent -- )
</a></b></pre><p>Create the control.
</p><pre><b><a name="34">;Class
</a></b></pre><p>End of StaticControl class
</p><a name="CheckControl"></a>
<h2>CheckControl control class
</h2><pre><b><a name="35">:Class CheckControl &lt;Super CONTROL
</a></b></pre><p>Class for check box controls.
</p><pre><b><a name="36">:M WindowStyle: ( -- style )
</a></b></pre><p>Get the window style of the control. The default style is: BS_AUTOCHECKBOX,
and WS_TABSTOP.
</p><pre><b><a name="37">:M Start: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( Parent -- )
</a></b></pre><p>Create the control.
</p><pre><b><a name="38">;Class
</a></b></pre><p>End of CheckControl class
</p><a name="RadioControl"></a>
<h2>RadioControl control class
</h2><pre><b><a name="39">:Class RadioControl &lt;Super CONTROL
</a></b></pre><p>Class for radio button controls.
</p><pre><b><a name="40">:M WindowStyle: ( -- style )
</a></b></pre><p>Get the window style of the control. The default style is: BS_AUTORADIOBUTTON,
and WS_TABSTOP.
</p><pre><b><a name="41">:M Start: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( Parent -- )
</a></b></pre><p>Create the control.
</p><pre><b><a name="42">;Class
</a></b></pre><p>End of RadioControl class
</p><a name="ButtonControl"></a>
<h2>ButtonControl control class
</h2><pre><b><a name="43">:Class ButtonControl &lt;Super CONTROL
</a></b></pre><p>Class for push button controls.
</p><pre><b><a name="44">:M ClassInit: &nbsp;&nbsp;( -- )
</a></b></pre><p>Initialise the class.
</p><pre><b><a name="45">:M SetFunc: &nbsp;&nbsp;&nbsp;&nbsp;( cfa -- )
</a></b></pre><p>Set the button function. This function is executed when the
button is pressed with a click with the left mouse button
</p><pre><b><a name="46">:M WindowStyle: ( -- style )
</a></b></pre><p>Get the window style of the control. The default style is: BS_PUSHBUTTON,
and WS_TABSTOP.
</p><pre><b><a name="47">:M Start: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( Parent -- )
</a></b></pre><p>Create the control.
</p><pre><b><a name="48">;Class
</a></b></pre><p>End of ButtonControl class
</p><a name="DialogWindow"></a>
<h2>Dialog Window Class
</h2><pre><b><a name="49">:CLASS DialogWindow &nbsp;&nbsp;&lt;Super Window
</a></b></pre><p>Base class for windows that contain controls.
</p><pre><b><a name="50">:M ClassInit: &nbsp;&nbsp;( -- )
</a></b></pre><p>Initialise the class.
</p><pre><b><a name="51">;Class
</a></b></pre><p>End of DialogWindow class
</p><hr /><h1>ExControls -- More (enhanced) classes for standard windows controls.
</h1><hr /><a name="Statusbar"></a>
<h2>Statusbar class
</h2><pre><b><a name="0">:Class Statusbar &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Super Control
</a></b></pre><p>Status bar control
</p><p>A status bar is a horizontal window at the bottom of a parent window in
which an application can display various kinds of status information.
</p><p>This status bar control has only one part to display information.
</p><pre><b><a name="1">:M Start: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( Parent -- )
</a></b></pre><p>Create the control.
</p><pre><b><a name="2">:M RaisedBorder: ( -- )
</a></b></pre><p>The text is drawn with a border to appear lower than the plane of the
window (default).
</p><pre><b><a name="3">:M NoBorder: &nbsp;&nbsp;&nbsp;( -- )
</a></b></pre><p>The text is drawn without borders.
</p><pre><b><a name="4">:M SunkenBorder: ( -- )
</a></b></pre><p>The text is drawn with a border to appear higher than the plane of the window.
</p><pre><b><a name="5">:M ClassInit: &nbsp;&nbsp;( -- )
</a></b></pre><p>Initialise the class.
</p><pre><b><a name="6">:M MinHeight: &nbsp;&nbsp;( #pixels -- )
</a></b></pre><p>Sets the minimum height of the status window's drawing area.
</p><p>The minimum height is the sum of #pixels and twice the width, in pixels,
of the vertical border of the status window.
</p><p>An application must use the Redraw: method to redraw the window.
</p><pre><b><a name="7">:M GetBorders: &nbsp;( -- hWidth vWidth divWidth )
</a></b></pre><p>Retrieves the current widths of the horizontal and vertical borders of
the status window.
</p><p><i>&nbsp;hWidth </i>&nbsp;is the width of the horizontal border.
</p><p><i>&nbsp;vWidth </i>&nbsp;is the width of the vertical border.
</p><p><i>&nbsp;divWidth </i>&nbsp;is the width of the border between rectangles.
</p><pre><b><a name="8">:M Redraw: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( -- )
</a></b></pre><p>Redraw the statusbar after changes (e.g. size).
</p><pre><b><a name="9">:M SetText: &nbsp;&nbsp;&nbsp;&nbsp;( szText -- )
</a></b></pre><p>Sets the text in the status window.
</p><p>Use <i>&nbsp;RaisedBorder: </i>, <i>&nbsp;NoBorder: </i>&nbsp;or <i>&nbsp;SunkenBorder: </i>&nbsp;to set
the the style how the text is drawn.
</p><pre><b><a name="10">:M Clear: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( -- )
</a></b></pre><p>clears text in the status window.
</p><pre><b><a name="11">:M Setfont: &nbsp;&nbsp;&nbsp;&nbsp;( handle -- )
</a></b></pre><p>Set the font in the control.
</p><pre><b><a name="12">;Class
</a></b></pre><p>End of Statusbar class
</p><a name="MultiStatusbar"></a>
<h2>MultiStatusbar class
</h2><pre><b><a name="13">:Class MultiStatusbar &nbsp;&nbsp;&lt;Super Statusbar
</a></b></pre><p>Status bar control
</p><p>A status bar is a horizontal window at the bottom of a parent window in
which an application can display various kinds of status information.
</p><p>This status bar control can have multiple parts to display information.
</p><pre><b><a name="14">:M Start: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( Parent -- )
</a></b></pre><p>Create the control.
</p><pre><b><a name="15">:M SetParts: &nbsp;&nbsp;&nbsp;( aWidths nParts -- )
</a></b></pre><p>Sets the number of parts in the status window and the coordinate of the right
edge of each part.
</p><p><i>&nbsp;nParts </i>&nbsp;Number of parts to set (cannot be greater than 256).
</p><p><i>&nbsp;aWidths </i>&nbsp;is a pointer to an integer array. The number of elements is
specified in nParts. Each element specifies the position, in client coordinates,
of the right edge of the corresponding part. If an element is -1, the right edge
of the corresponding part extends to the border of the window.
</p><p>Note: <i>&nbsp;aWidths </i>&nbsp;must be valid until SetParts: is used again!
</p><pre><b><a name="16">:M GetParts: &nbsp;&nbsp;&nbsp;( -- aWidths nParts )
</a></b></pre><p>Gets the number of parts in the status window and the coordinate of the right
edge of each part.
</p><pre><b><a name="17">:M SetSimple: &nbsp;&nbsp;( -- )
</a></b></pre><p>Reset the status bar to show only one part.
</p><pre><b><a name="18">:M SetMulti: &nbsp;&nbsp;&nbsp;( -- )
</a></b></pre><p>Set the status bar to show all parts set with <i>&nbsp;SetParts: </i>&nbsp;before.
</p><pre><b><a name="19">:M SetText: &nbsp;&nbsp;&nbsp;&nbsp;( szText n -- )
</a></b></pre><p>Sets the text in the <i>&nbsp;n'th </i>&nbsp;part of status window.
</p><p>Use <i>&nbsp;RaisedBorder: </i>, <i>&nbsp;NoBorder: </i>&nbsp;or <i>&nbsp;SunkenBorder: </i>&nbsp;to set
the the style how the text is drawn.
</p><pre><b><a name="20">;Class
</a></b></pre><p>End of MultiStatusbar class
</p><a name="TextBox"></a>
<h2>TextBox class
</h2><pre><b><a name="0">:Class TextBox &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Super EditControl
</a></b></pre><p>Class for Edit controls.
An edit control is a rectangular control window typically used in a dialog
box to permit the user to enter and edit text by typing on the keyboard.
</p><p>This is an enhanced Version of the EditControl class.
</p><pre><b><a name="1">:M ClassInit: &nbsp;&nbsp;( -- )
</a></b></pre><p>Initialise the class.
</p><pre><b><a name="2">:M SetWmSetFocus: ( xt -- )
</a></b></pre><p>Set handler for WM_SETFOCUS messages.
</p><pre><b><a name="3">:M WindowStyle: ( -- style )
</a></b></pre><p>Get the window style of the control.
</p><pre><b><a name="4">:M ReadOnly: &nbsp;&nbsp;&nbsp;( f -- )
</a></b></pre><p>Set or remove the read-only style of the edit control.
A value of TRUE sets the read-only style; a value of FALSE removes it.
</p><pre><b><a name="5">:M SetSelection: ( nEnd nStart -- )
</a></b></pre><p>Selects a range of characters in the edit control. <i>&nbsp;nEnd </i>&nbsp;specifies the
ending character position of the selection. <i>&nbsp;nStart </i>&nbsp;specifies the
starting character position of the selection.
</p><p>The start value can be greater than the end value. The lower of the two values
specifies the character position of the first character in the selection. The
higher value specifies the position of the first character beyond the selection.
</p><p>The start value is the anchor point of the selection, and the end value is the
active end. If the user uses the SHIFT key to adjust the size of the selection,
the active end can move but the anchor point remains the same.
</p><p>The control displays a flashing caret at the end position regardless of the relative
values of start and end.
</p><pre><b><a name="6">:M GetSelection: ( -- nEnd nStart )
</a></b></pre><p>Get the starting and ending character positions of the current selection in the edit control
</p><pre><b><a name="7">:M SelectAll: &nbsp;&nbsp;( -- )
</a></b></pre><p>Set the focus to the edit control and select all the text in the control.
</p><pre><b><a name="8">:M RemoveSelection: ( -- )
</a></b></pre><p>Remove any selection.
</p><pre><b><a name="9">:M GetCursor: &nbsp;&nbsp;( -- n )
</a></b></pre><p>Get location of cursor (chars from start)
</p><pre><b><a name="10">:M IsModified?: ( -- f )
</a></b></pre><p>Get the state of an edit control's modification flag. The flag indicates whether
the contents of the edit control have been modified.
</p><pre><b><a name="11">:M SetModify: &nbsp;&nbsp;( f -- )
</a></b></pre><p>Sets or clears the modification flag for an edit control. The modification flag
indicates whether the text within the edit control has been modified.
</p><pre><b><a name="12">:M NotModified: ( -- )
</a></b></pre><p>Depreacted method. Use <i>&nbsp;SetModify: </i>&nbsp;instead.
</p><pre><b><a name="13">:M Undo?: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( -- f )
</a></b></pre><p>Check is there is an operation in the control's undo queue.
</p><pre><b><a name="14">:M Undo: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( -- )
</a></b></pre><p>Undoes the last edit control operation in the control's undo queue.
</p><pre><b><a name="15">:M Redo?: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( -- f )
</a></b></pre><p>Check is there is an operation in the control's redo queue.
</p><pre><b><a name="16">:M Redo: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( -- )
</a></b></pre><p>Redoes the last edit control operation in the control's redo queue.
</p><pre><b><a name="17">:M Cut: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( -- )
</a></b></pre><p>Delete (cut) the current selection, if any, in the edit control and
copy the deleted text to the clipboard in CF_TEXT format.
</p><pre><b><a name="18">:M Copy: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( -- )
</a></b></pre><p>Copy the current selection to the clipboard in CF_TEXT format.
</p><pre><b><a name="19">:M Paste: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( -- )
</a></b></pre><p>Copy the current content of the clipboard to the edit control at the current
caret position. Data is inserted only if the clipboard contains data in CF_TEXT
format.
</p><pre><b><a name="20">:M Clear: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( -- )
</a></b></pre><p>Delete selected text.
</p><pre><b><a name="21">:M SetFont: &nbsp;&nbsp;&nbsp;&nbsp;( handle -- )
</a></b></pre><p>Set the font in the control.
</p><pre><b><a name="22">:M SetTextLimit: ( n -- )
</a></b></pre><p>Set the text limit of an edit control.
</p><p><i>&nbsp;n </i>&nbsp;Specifies the maximum number of characters the user can enter. This number does
not include the null terminator. <br />
Edit controls on Windows NT/ 2000: If this parameter is zero, the text length is set
to 0x7FFFFFFE characters for single-line edit controls or -1 for multiline edit controls. <br />
Edit controls on Windows 95/98: If this parameter is zero, the text length is set to 0x7FFE
characters for single-line edit controls or 0xFFFF for multiline edit controls.
</p><p>The SetTextLimit: method limits only the text the user can enter. It does not affect any text
already in the edit control when the message is sent, nor does it affect the length of the text
copied to the edit control by the SetText: method. If an application uses the SetText: method
to place more text into an edit control than is specified in the SetTextLimit: method, the user can
edit the entire contents of the edit control.
</p><p>Before the SetTextLimit: method is called, the default limit for the amount of text a user can enter
in an edit control is 32,767 characters.
</p><p>Edit controls on Windows NT/ 2000: For single-line edit controls, the text limit is either 0x7FFFFFFE bytes
or the value of <i>&nbsp;n </i>, whichever is smaller. For multiline edit controls, this value is either
-1 bytes or the value of <i>&nbsp;n </i>, whichever is smaller.
</p><p>Edit controls on Windows 95/98: For single-line edit controls, the text limit is either 0x7FFE bytes or
the value of <i>&nbsp;n </i>, whichever is smaller. For multiline edit controls, this value is either 0xFFFF bytes
or the value of <i>&nbsp;n </i>, whichever is smaller.
</p><pre><b><a name="23">:M GetTextEx: &nbsp;\ { buffer$ maxlen -- buffer$ len }
</a></b></pre><p>Copies the text of the edit control into a buffer.
</p><p><i>&nbsp;buffer$ </i>&nbsp;is the address of the buffer that will receive the text.
</p><p><i>&nbsp;maxlen </i>&nbsp;Specifies the maximum number of characters to copy to the
buffer, including the NULL character. If the text exceeds this limit, it
is truncated.
</p><p>If the method succeeds, <i>&nbsp;len </i>&nbsp;is the length, in characters, of the copied
string, not including the terminating null character.
</p><pre><b><a name="24">:M SetTextZ: &nbsp;&nbsp;&nbsp;( addrz -- )
</a></b></pre><p>Copy the text from the 0 terminated string <i>&nbsp;addrz </i>&nbsp;into the edit control.
</p><pre><b><a name="25">;Class
</a></b></pre><p>End of TextBox class
</p><a name="PassWordBox"></a>
<h2>PassWordBox class
</h2><pre><b><a name="26">:Class PassWordBox &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;super TextBox
</a></b></pre><p>Class for Edit controls.
All characters in the control are displayed as an asterisk (*).
</p><pre><b><a name="27">:M WindowStyle: ( -- style )
</a></b></pre><p>Get the window style of the control. The default style is ES_PASSWORD.
</p><pre><b><a name="28">;Class
</a></b></pre><p>End of PassWordBox class
</p><a name="MultiLineTextBox"></a>
<h2>MultiLineTextBox class
</h2><pre><b><a name="29">:Class MultiLineTextBox &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;super TextBox
</a></b></pre><p>Class for multi line text edit controls.
</p><pre><b><a name="30">:M WindowStyle: ( -- style )
</a></b></pre><p>Get the window style of the control. The default style is:
ES_AUTOVSCROLL, ES_MULTILINE, ES_WANTRETURN and ES_NOHIDESEL.
</p><pre><b><a name="31">:M SetTabStops: ( tabarray #tabs -- )
</a></b></pre><p>Sets the tab stops in the multiline edit control. When text is copied to
the control, any tab character in the text causes space to be generated up
to the next tab stop.
</p><p><i>&nbsp;#tabs </i>&nbsp;Specifies the number of tab stops contained in the array. If this
parameter is zero, the lParam parameter is ignored and default tab stops are
set at every 32 dialog template units. If this parameter is 1, tab stops are
set at every n dialog template units, where n is the distance pointed to by
the <i>&nbsp;tabarray </i>&nbsp;parameter. If this parameter is greater than 1, <i>&nbsp;tabarray </i>
is a pointer to an array of tab stops.
</p><p><i>&nbsp;tabarray </i>&nbsp;Pointer to an array of unsigned integers specifying the tab stops,
in dialog template units. If the <i>&nbsp;#tabs </i>&nbsp;parameter is 1, this parameter is a pointer
to an unsigned integer containing the distance between all tab stops, in dialog template
units.
</p><pre><b><a name="32">:M DefaultTabs: ( -- )
</a></b></pre><p>Set the default tab stops in the multiline edit control (16 dialog template units).
</p><pre><b><a name="33">:M SetMargins: &nbsp;( left right -- )
</a></b></pre><p>Sets the widths of the left and right margins for an edit control.
</p><pre><b><a name="34">:M SelectAll: &nbsp;&nbsp;( -- )
</a></b></pre><p>Select all the text in the multiline edit control.
</p><pre><b><a name="35">:M GetLine: &nbsp;&nbsp;&nbsp;&nbsp;( -- n )
</a></b></pre><p>Return location of the cursor (lines from start).
</p><pre><b><a name="36">:M Wrap: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( -- )
</a></b></pre><p>Set control to wrap text.
Note this method does nothing!
</p><pre><b><a name="37">:M Unwrap: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( -- )
</a></b></pre><p>Set control to scroll instead of wrap text.
Note this method does nothing!
</p><pre><b><a name="38">:M GetLineCount: ( -- n )
</a></b></pre><p>Retrieves the number of lines in the multiline edit control.
</p><p>The return value is an integer specifying the total number of
text lines in the multiline edit control. If the control has no text,
the return value is 1. The return value will never be less than 1.
</p><pre><b><a name="39">:M GetSelText: &nbsp;( addr -- n )
</a></b></pre><p>Retrieves the currently selected text from the edit control.
</p><p><i>&nbsp;addr </i>&nbsp;is the address of the a buffer that receives the selected text.
The calling application must ensure that the buffer is large enough to hold
the selected text.
</p><p>Note: The text is copyied to the clipboard, too!
</p><pre><b><a name="40">:M LineScroll: &nbsp;( n -- )
</a></b></pre><p>scroll n lines
</p><pre><b><a name="41">;Class
</a></b></pre><p>End of MultiLineTextBox class
</p><a name="RichEditControl"></a>
<h2>RichEditControl class
</h2><pre><b><a name="42">:Class RichEditControl &nbsp;&lt;Super MultiLineTextBox
</a></b></pre><p>Class for rich edit controls.
</p><pre><b><a name="43">:M Start: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( Parent -- )
</a></b></pre><p>Create the control.
</p><pre><b><a name="44">:M GetSelText: &nbsp;( addr -- n )
</a></b></pre><p>Retrieves the currently selected text from the edit control.
</p><p><i>&nbsp;addr </i>&nbsp;is the address of the a buffer that receives the selected text.
The calling application must ensure that the buffer is large enough to hold
the selected text.
</p><pre><b><a name="45">:M GetLines: &nbsp;&nbsp;&nbsp;( -- nr )
</a></b></pre><p>Depreacted method. Use <i>&nbsp;GetLineCount: </i>&nbsp;instead.
</p><pre><b><a name="46">;Class
</a></b></pre><p>End of RichEditControl class
</p><a name="ComboBox"></a>
<h2>ComboBox class
</h2><pre><b><a name="0">:Class ComboBox &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;super ComboControl
</a></b></pre><p>ComboBox control
(enhanced Version of the ComboControl class)
</p><pre><b><a name="1">:M SetDir: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( dirz$ attrib -- )
</a></b></pre><p>Add the names of directories and files that match a specified string and
set of file attributes. SetDir: can also add mapped drive letters to the list.
</p><p><i>&nbsp;attrib </i>&nbsp;Specifies the attributes of the files or directories to be added to
the combo box. This parameter can be one or more of the following values:
</p><table border="1"><tr><td>DDL_ARCHIVE
</td>
<td>Includes archived files.
</td>
</tr>
<tr><td>DDL_DIRECTORY
</td>
<td>Includes subdirectories, which are enclosed in square brackets ([ ]).
</td>
</tr>
<tr><td>DDL_DRIVES All
</td>
<td>mapped drives are added to the list. Drives are listed in the form [-x-], where x is the drive letter.
</td>
</tr>
<tr><td>DDL_EXCLUSIVE
</td>
<td>Includes only files with the specified attributes. By default, read-write files are listed even if DDL_READWRITE is not specified.
</td>
</tr>
<tr><td>DDL_HIDDEN
</td>
<td>Includes hidden files.
</td>
</tr>
<tr><td>DDL_READONLY
</td>
<td>Includes read-only files.
</td>
</tr>
<tr><td>DDL_READWRITE
</td>
<td>Includes read-write files with no additional attributes. This is the default.
</td>
</tr>
<tr><td>DDL_SYSTEM
</td>
<td>Includes system files.
</td>
</tr>
</table><p><i>&nbsp;dirz$ </i>&nbsp;specifies an absolute path, relative path, or file name. An absolute path
can begin with a drive letter (for example, d:\) or a UNC name (for example, \machinename\sharename).
If the string specifies a file name or directory that has the attributes specified by
the wParam parameter, the file name or directory is added to the list. If the file name
or directory name contains wildcard characters (? or *), all files or directories that
match the wildcard expression and have the attributes specified by the wParam parameter
are added to the list displayed in the combo box.
</p><pre><b><a name="2">:M AddStringTo: ( z&quot;string&quot; -- )
</a></b></pre><p>Add a string to the list box of a combo box. If the combo box does not have the
CBS_SORT style, the string is added to the end of the list. Otherwise, the string
is inserted into the list, and the list is sorted.
</p><pre><b><a name="3">:M SetSelection: ( n -- )
</a></b></pre><p>Select a string in the list of a combo box.
</p><pre><b><a name="4">:M GetSelection: ( -- n )
</a></b></pre><p>Retrieve the index of the currently selected item, if any.
</p><p>The return value is the zero-based index of the currently selected item. If there is no
selection, the return value is CB_ERR.
</p><pre><b><a name="5">:M GetString: &nbsp;&nbsp;&nbsp;( index -- addr n )
</a></b></pre><p>Retrieve a string from the combo box.
</p><p>The return value is the address and length of the string.
If <i>&nbsp;n </i>&nbsp;does not specify a valid index, the length is CB_ERR.
</p><pre><b><a name="6">:M GetSelectedString: ( -- addr cnt )
</a></b></pre><p>Retrieve the currently selected string from the combo box.
Note: The string is returned in a dynamicly allocated buffer of medium persistance. If a
permenant copy is needed it should be moved.
</p><pre><b><a name="7">:M Setfont: &nbsp;&nbsp;&nbsp;&nbsp;( handle -- )
</a></b></pre><p>Set the font in the control.
</p><pre><b><a name="8">:M InsertStringAt: ( lpszString posn -- )
</a></b></pre><p>Insert string at the specified position.
</p><p><i>&nbsp;posn </i>&nbsp;specifies the zero-based index of the position at which to insert
the string. If this parameter is -1, the string is added to the end of the list.
</p><p><i>&nbsp;lpszString </i>&nbsp;is a null-terminated string to be inserted.
</p><pre><b><a name="9">:M DeleteString: ( index -- )
</a></b></pre><p>Delete a string.
</p><p><i>&nbsp;index </i>&nbsp;specifies the zero-based index of the string to delete.
</p><pre><b><a name="10">:M Clear: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( -- )
</a></b></pre><p>Remove all strings from the combo box
</p><pre><b><a name="11">:M Find: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( lpszString -- index )
</a></b></pre><p>Search the list for an item beginning with the string (case-insensitive)
</p><pre><b><a name="12">:M FindExact: &nbsp;&nbsp;( lpszString -- index )
</a></b></pre><p>Find the first item that matches the string exactly (case-insensitive)
</p><pre><b><a name="13">:M GetCount: &nbsp;&nbsp;&nbsp;( -- n )
</a></b></pre><p>Return count of items in list
</p><pre><b><a name="14">:M SelectString: ( lpszString -- index )
</a></b></pre><p>Select item beginning with string
</p><pre><b><a name="15">:M GetStringAt: ( index -- a n )
</a></b></pre><p>Return string of specified item.
</p><pre><b><a name="16">:M GetCurrent: &nbsp;( -- index )
</a></b></pre><p>return current selection item
</p><pre><b><a name="17">:M Enable: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( f -- )
</a></b></pre><p>Enable the control.
</p><pre><b><a name="18">:M Disable: &nbsp;&nbsp;&nbsp;&nbsp;( -- )
</a></b></pre><p>Disable the control.
</p><pre><b><a name="19">;Class
</a></b></pre><p>End of ComboBox class
</p><a name="ComboListBox"></a>
<h2>ComboListBox class
</h2><pre><b><a name="20">:Class ComboListBox &nbsp;&nbsp;&nbsp;&nbsp;&lt;super ComboBox
</a></b></pre><p>ComboBox list control
</p><pre><b><a name="21">:M WindowStyle: ( -- style )
</a></b></pre><p>Get the window style of the control. The default style is: CBS_DROPDOWNLIST
</p><pre><b><a name="22">:M Start: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( Parent -- )
</a></b></pre><p>Create the control.
</p><pre><b><a name="23">;Class
</a></b></pre><p>End of ComboListBox class
</p><a name="ListBox"></a>
<h2>ListBox class
</h2><pre><b><a name="24">:Class ListBox &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;super ListControl
</a></b></pre><p>ListBox control (single selection)
(enhanced Version of the ListControl class)
</p><pre><b><a name="25">:M SetDir: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( dirz$ attrib -- )
</a></b></pre><p>Add the names of directories and files that match a specified string and
set of file attributes. SetDir: can also add mapped drive letters to the list.
</p><p><i>&nbsp;attrib </i>&nbsp;Specifies the attributes of the files or directories to be added to
the combo box. This parameter can be one or more of the following values:
</p><table border="1"><tr><td>DDL_ARCHIVE
</td>
<td>Includes archived files.
</td>
</tr>
<tr><td>DDL_DIRECTORY
</td>
<td>Includes subdirectories, which are enclosed in square brackets ([ ]).
</td>
</tr>
<tr><td>DDL_DRIVES All
</td>
<td>mapped drives are added to the list. Drives are listed in the form [-x-], where x is the drive letter.
</td>
</tr>
<tr><td>DDL_EXCLUSIVE
</td>
<td>Includes only files with the specified attributes. By default, read-write files are listed even if DDL_READWRITE is not specified.
</td>
</tr>
<tr><td>DDL_HIDDEN
</td>
<td>Includes hidden files.
</td>
</tr>
<tr><td>DDL_READONLY
</td>
<td>Includes read-only files.
</td>
</tr>
<tr><td>DDL_READWRITE
</td>
<td>Includes read-write files with no additional attributes. This is the default.
</td>
</tr>
<tr><td>DDL_SYSTEM
</td>
<td>Includes system files.
</td>
</tr>
</table><p><i>&nbsp;dirz$ </i>&nbsp;specifies an absolute path, relative path, or file name. An absolute path
can begin with a drive letter (for example, d:\) or a UNC name (for example, \machinename\sharename).
If the string specifies a file name or directory that has the attributes specified by
the wParam parameter, the file name or directory is added to the list. If the file name
or directory name contains wildcard characters (? or *), all files or directories that
match the wildcard expression and have the attributes specified by the wParam parameter
are added to the list displayed in the combo box.
</p><pre><b><a name="26">:M Clear: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( -- )
</a></b></pre><p>Remove all items from the list box.
</p><pre><b><a name="27">:M AddStringTo: ( z&quot;string&quot; -- )
</a></b></pre><p>Add a string to a list box. If the list box does not have the LBS_SORT style,
the string is added to the end of the list. Otherwise, the string is inserted
into the list and the list is sorted.
</p><pre><b><a name="28">:M SetSelection: ( n -- )
</a></b></pre><p>Select a string and scroll it into view, if necessary. When the new string is
selected, the list box removes the highlight from the previously selected string.
</p><p><i>&nbsp;n </i>&nbsp;specifies the zero-based index of the string that is selected. If this parameter
is -1, the list box is set to have no selection.
</p><p>Windows 95/98: The <i>&nbsp;n </i>&nbsp;parameter is limited to 16-bit values. This means list boxes
cannot contain more than 32,767 items. Although the number of items is restricted, the
total size in bytes of the items in a list box is limited only by available memory.
</p><pre><b><a name="29">:M GetSelection: ( -- n )
</a></b></pre><p>Retrieve the index of the currently selected item, if any.
</p><p>The return value is the zero-based index of the currently selected item. If there is no
selection, the return value is LB_ERR.
</p><pre><b><a name="30">:M GetString: &nbsp;&nbsp;&nbsp;( index -- addr n )
</a></b></pre><p>Retrieve a string from the list box.
</p><p>The return value is the address and length of the string.
If <i>&nbsp;n </i>&nbsp;does not specify a valid index, the length is LB_ERR.
</p><pre><b><a name="31">:M GetSelectedString: ( -- addr cnt )
</a></b></pre><p>Retrieve the currently selected string from the list box.
Note: The string is returned in a dynamicly allocated buffer of medium persistance. If a
permenant copy is needed it should be moved.
</p><pre><b><a name="32">:M GetCount: &nbsp;&nbsp;&nbsp;( -- n )
</a></b></pre><p>Retrieve the number of items in the list box.
</p><pre><b><a name="33">:M Setfont: &nbsp;&nbsp;&nbsp;&nbsp;( handle -- )
</a></b></pre><p>Set the font in the control.
</p><pre><b><a name="34">:M AddString: &nbsp;&nbsp;( lpszString -- )
</a></b></pre><p>Add a string to a list box. If the list box does not have the LBS_SORT style,
the string is added to the end of the list. Otherwise, the string is inserted
into the list and the list is sorted.
Note: This method ABORT's on error.
</p><pre><b><a name="35">:M InsertString: ( lpszString index -- )
</a></b></pre><p>Insert a string into the list box. Unlike the AddString: method, the InsertString: method
does not cause a list with the LBS_SORT style to be sorted.
Note: This method ABORT's on error.
</p><p><i>&nbsp;index </i>&nbsp;specifies the zero-based index of the position at which to insert
the string. If this parameter is -1, the string is added to the end of the list.
</p><p>Windows 95/98: The <i>&nbsp;index </i>&nbsp;parameter is limited to 16-bit values. This means list
boxes cannot contain more than 32,767 items. Although the number of items is restricted,
the total size in bytes of the items in a list box is limited only by available memory.
</p><pre><b><a name="36">:M DeleteString: ( index -- )
</a></b></pre><p>Delete a string from the list box.
</p><p><i>&nbsp;index </i>&nbsp;specifies the zero-based index of the string to be deleted.
</p><p>Windows 95/98: The <i>&nbsp;index </i>&nbsp;parameter is limited to 16-bit values. This means list boxes
cannot contain more than 32,767 items. Although the number of items is restricted, the total
size in bytes of the items in a list box is limited only by available memory.
</p><pre><b><a name="37">:M Find: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( lpszString -- index )
</a></b></pre><p>Find the first string in the list box that begins with the specified string.
The entire list box is searched from the beginning.
The search is case independent, so the string (<i> lpszString </i>) can contain any combination of
uppercase and lowercase letters.
</p><p>The return value is the zero-based index of the matching item, or LB_ERR if the search was unsuccessful.
</p><pre><b><a name="38">:M FindExact: &nbsp;&nbsp;( lpszString -- index )
</a></b></pre><p>Find the first list box string that exactly matches the specified string, except that the search
is not case sensitive.
The entire list box is searched from the beginning.
</p><p>The return value is the zero-based index of the matching item, or LB_ERR if the search was unsuccessful.
</p><pre><b><a name="39">:M GetCurrent: &nbsp;( -- index )
</a></b></pre><p>Retrieve the index of the currently selected item, if any.
</p><p>The return value is the zero-based index of the currently selected item. If there is no
selection, the return value is LB_ERR.
</p><pre><b><a name="40">:M SelectString: ( lpszString -- index )
</a></b></pre><p>Search the list box for an item that begins with the characters in a specified string.
If a matching item is found, the item is selected.
The entire list box is searched from the beginning.
</p><p>If the search is successful, the return value is the index of the selected item. If the
search is unsuccessful, the return value is LB_ERR and the current selection is not changed.
</p><pre><b><a name="41">:M GetState: &nbsp;&nbsp;&nbsp;( index -- f )
</a></b></pre><p>Retrieve the selection state of an item.
If an item is selected, the return value is true; otherwise, it is false.
Note: This method ABORT's on error.
</p><pre><b><a name="42">:M Enable: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( f -- )
</a></b></pre><p>Enable the control.
</p><pre><b><a name="43">:M Disable: &nbsp;&nbsp;&nbsp;&nbsp;( -- )
</a></b></pre><p>Disable the control.
</p><pre><b><a name="44">:M SetTabStops: ( addr cnt -- )
</a></b></pre><p>Set the tab-stop positions in the list box.
</p><p><i>&nbsp;cnt </i>&nbsp;Specifies the number of tab stops in the list box.
</p><p><i>&nbsp;addr </i>&nbsp;is a pointer to the first member of an array of integers containing the tab
stops. The integers represent the number of quarters of the average character width for
the font that is selected into the list box. For example, a tab stop of 4 is placed at
1.0 character units, and a tab stop of 6 is placed at 1.5 average character units. However,
if the list box is part of a dialog box, the integers are in dialog template units. The tab
stops must be sorted in ascending order; backward tabs are not allowed.
</p><p>The list box must have been created with the LBS_USETABSTOPS style.
</p><pre><b><a name="45">;Class
</a></b></pre><p>End of ListBox class
</p><a name="MultiListbox"></a>
<h2>MultiListbox class
</h2><pre><b><a name="46">:Class MultiListbox &nbsp;&nbsp;&nbsp;&nbsp;&lt;Super Listbox
</a></b></pre><p>ListBox control
MultiListbox allows multiple selections to be made.
Click once on an item to select it. &nbsp;Click again to deselect.
</p><pre><b><a name="47">:M WindowStyle: ( -- style )
</a></b></pre><p>Get the window style of the control. The default style is: LBS_MULTIPLESEL
</p><pre><b><a name="48">:M Select: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( index -- )
</a></b></pre><p>Select a string in the list box.
</p><p><i>&nbsp;index </i>&nbsp;specifies the zero-based index of the string to set. If this parameter
is -1, the selection is added to all strings.
Note: This method ABORT's on error.
</p><pre><b><a name="49">:M Unselect: &nbsp;&nbsp;&nbsp;( index -- )
</a></b></pre><p>Deselect a string in the list box.
</p><p><i>&nbsp;index </i>&nbsp;specifies the zero-based index of the string to set. If this parameter
is -1, the selection is removed from all strings.
Note: This method ABORT's on error.
</p><pre><b><a name="50">:M GetSelCount: ( -- n )
</a></b></pre><p>Retrieve the total number of selected items in the list box.
</p><pre><b><a name="51">:M GetSelectedItems: ( array cnt -- count )
</a></b></pre><p>Fill a buffer with an array of integers that specify the item numbers of selected
items in the list box.
</p><p><i>&nbsp;array </i>&nbsp;is a pointer to a buffer large enough for the number of integers specified
by the <i>&nbsp;cnt </i>&nbsp;parameter.
</p><p><i>&nbsp;cnt </i>&nbsp;specifies the maximum number of selected items whose item numbers are to be placed
in the buffer. Windows 95/98: The <i>&nbsp;cnt </i>&nbsp;parameter is limited to 16-bit values. This means
list boxes cannot contain more than 32,767 items. Although the number of items is restricted,
the total size in bytes of the items in a list box is limited only by available memory.
</p><pre><b><a name="52">;Class
</a></b></pre><p>End of MultiListbox class
</p><a name="MultiExListbox"></a>
<h2>MultiExListbox class
</h2><pre><b><a name="53">:Class MultiExListbox &nbsp;&nbsp;&lt;Super MultiListbox
</a></b></pre><p>ListBox control
Also allows multiple selections to be made.
The difference is that Ctrl-Click selects and unselects
individual items and Shift-Click will select a range (as will
Shift-Drag.
</p><pre><b><a name="54">:M WindowStyle: ( -- style )
</a></b></pre><p>Get the window style of the control. The default style is: LBS_EXTENDEDSEL
</p><pre><b><a name="55">;Class
</a></b></pre><p>End of MultiExListbox class
</p><a name="DragListbox"></a>
<h2>DragListbox class
</h2><pre><b><a name="56">:Class DragListbox &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Super Listbox
</a></b></pre><p>ListBox control
Allows dragging of items in list box to re-order them
requires processing of drag list notification messages by the
application to actually do the dragging.
</p><pre><b><a name="57">:M WindowStyle: ( -- style )
</a></b></pre><p>Get the window style of the control. The default style is: LBS_EXTENDEDSEL
</p><pre><b><a name="58">:M Start: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( Parent -- )
</a></b></pre><p>Create the control.
</p><pre><b><a name="59">;Class
</a></b></pre><p>End of DragListbox class
</p><a name="UpDownControl"></a>
<h2>Up-Down Control class
</h2><pre><b><a name="0">:Class UpDownControl &nbsp;&nbsp;&nbsp;&lt;Super Control
</a></b></pre><p>Up-Down control
</p><p>An up-down control is a pair of arrow buttons that the user can click to
increment or decrement a value, such as a scroll position or a number displayed
in a companion control.
</p><p>For 16 Bit values only.
</p><pre><b><a name="1">:M WindowStyle: ( -- style )
</a></b></pre><p>Get the window style of the control. Default style is:
WS_BORDER, UDS_ARROWKEYS, UDS_SETBUDDYINT and UDS_ALIGNRIGHT.
</p><pre><b><a name="2">:M Start: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( Parent -- )
</a></b></pre><p>Create the control.
</p><pre><b><a name="3">:M StartSize: &nbsp;&nbsp;( -- cx cy )
</a></b></pre><p>default window size
</p><pre><b><a name="4">:M StartPos: &nbsp;&nbsp;&nbsp;( -- x y )
</a></b></pre><p>default window position
</p><pre><b><a name="5">:M SetBuddy: &nbsp;&nbsp;&nbsp;( hBuddy -- )
</a></b></pre><p>Sets the buddy window for the up-down control.
</p><pre><b><a name="6">:M GetValue: &nbsp;&nbsp;&nbsp;( -- n )
</a></b></pre><p>Retrieves the current position of the up-down control.
Note: This method ABORT's on error.
</p><pre><b><a name="7">:M SetValue: &nbsp;&nbsp;&nbsp;( n -- )
</a></b></pre><p>Set the current position for the up-down control.
</p><pre><b><a name="8">:M SetDecimal: &nbsp;( -- )
</a></b></pre><p>Sets the radix base for the control to decimal.
Decimal numbers are signed.
</p><pre><b><a name="9">:M SetHex: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( -- )
</a></b></pre><p>Sets the radix base for the control to hexadecimal.
Hexadecimal numbers are always unsigned.
</p><pre><b><a name="10">:M GetBase: &nbsp;&nbsp;&nbsp;&nbsp;( -- n )
</a></b></pre><p>Get the current radix base (that is, either base 10 or 16).
</p><pre><b><a name="11">:M SetRange: &nbsp;&nbsp;&nbsp;( lower upper -- )
</a></b></pre><p>Sets the minimum and maximum positions (range) the control.
Neither position can be greater than the UD_MAXVAL value or less than
the UD_MINVAL value. In addition, the difference between the two positions
cannot exceed UD_MAXVAL.
</p><pre><b><a name="12">:M GetRange: &nbsp;&nbsp;&nbsp;( -- lower upper )
</a></b></pre><p>Retrieves the minimum and maximum positions (range) for the control.
</p><pre><b><a name="13">:M Enable: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( f -- )
</a></b></pre><p>Enable the control.
</p><pre><b><a name="14">:M Disable: &nbsp;&nbsp;&nbsp;&nbsp;( -- )
</a></b></pre><p>Disable the control.
</p><pre><b><a name="15">;Class
</a></b></pre><p>End of Up-Down Control Class
</p><a name="SpinnerControl"></a>
<h2>Spinner Control class
</h2><pre><b><a name="16">:Class SpinnerControl &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Super UpDownControl
</a></b></pre><p>Spinner Control Class.
</p><p>This class is a combination of an up-down control and a Text Box (the buddy).
</p><pre><b><a name="17">:M start: &nbsp;&nbsp;&nbsp;&nbsp;( parent -- )
</a></b></pre><p>Start the control.
</p><pre><b><a name="18">:M TheBox: &nbsp;&nbsp;( -- spinbox )
</a></b></pre><p>Object address of the text box for directly manipulating it (though it shouldn't really be done).
</p><pre><b><a name="19">:M Move: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( x y w h -- )
</a></b></pre><p>Move the text box to the specified positon and the up-down control as well.
</p><pre><b><a name="20">:M Select: &nbsp;&nbsp;&nbsp;( -- )
</a></b></pre><p>Selects the text inside the spinner
</p><pre><b><a name="21">:M SetFont: &nbsp;&nbsp;( hndl -- )
</a></b></pre><p>Set the font of the text box.
</p><pre><b><a name="22">:M Close: &nbsp;&nbsp;&nbsp;&nbsp;( -- )
</a></b></pre><p>Close the control.
</p><pre><b><a name="23">
</a></b></pre><p>End of Spinner Control Class.
</p><a name="CheckBox"></a>
<h2>CheckBox class
</h2><pre><b><a name="0">:Class CheckBox &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;super CheckControl
</a></b></pre><p>Class for check buttons
(enhanced Version of the CheckControl class)
</p><pre><b><a name="1">:M IsButtonChecked?: &nbsp;&nbsp;&nbsp;( -- f )
</a></b></pre><p>send message to self through parent
</p><pre><b><a name="2">:M Enable: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( f -- )
</a></b></pre><p>Enable the control.
</p><pre><b><a name="3">:M Disable: &nbsp;&nbsp;&nbsp;&nbsp;( -- )
</a></b></pre><p>Disable the control.
</p><pre><b><a name="4">:M Setfont: &nbsp;&nbsp;&nbsp;&nbsp;( handle -- )
</a></b></pre><p>Set the font in the control.
</p><pre><b><a name="5">;Class
</a></b></pre><p>End of CheckBox class
</p><a name="RadioButton"></a>
<h2>RadioButton class
</h2><pre><b><a name="6">:Class RadioButton &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;super RadioControl
</a></b></pre><p>Class for radio buttons
(enhanced Version of the RadioControl class)
</p><pre><b><a name="7">:M IsButtonChecked?: ( -- f )
</a></b></pre><p>Check if the radio button is checked or unchecked.
</p><pre><b><a name="8">:M CheckButton: ( -- )
</a></b></pre><p>Set the button state to checked.
</p><pre><b><a name="9">:M UnCheckButton: ( -- )
</a></b></pre><p>Set the button state to unchecked.
</p><pre><b><a name="10">:M Check: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( f -- )
</a></b></pre><p>Set the button state to either checked or unchecked.
</p><pre><b><a name="11">:M Enable: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( f -- )
</a></b></pre><p>Enable the control.
</p><pre><b><a name="12">:M Disable: &nbsp;&nbsp;&nbsp;&nbsp;( -- )
</a></b></pre><p>Disable the control.
</p><pre><b><a name="13">:M Setfont: &nbsp;&nbsp;&nbsp;&nbsp;( handle -- )
</a></b></pre><p>Set the font in the control.
</p><pre><b><a name="14">;Class
</a></b></pre><p>End of RadioButton class
</p><a name="GroupRadioButton"></a>
<h2>GroupRadioButton class
</h2><pre><b><a name="15">:Class GroupRadioButton &lt;super RadioButton
</a></b></pre><p>Class for radio buttons.
Use a GroupRadioButton object for the first radio button in every group
of radio buttons within your dialog.
</p><pre><b><a name="16">:M WindowStyle: ( -- style )
</a></b></pre><p>Get the window style of the control. Default is BS_GROUP.
</p><pre><b><a name="17">;Class
</a></b></pre><p>End of GroupRadioButton class
</p><a name="PushButton"></a>
<h2>PushButton class
</h2><pre><b><a name="18">:Class PushButton &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;super ButtonControl
</a></b></pre><p>Class for push buttons
(enhanced Version of the ButtonControl class)
</p><pre><b><a name="19">:M Setfont: &nbsp;&nbsp;&nbsp;&nbsp;( handle -- )
</a></b></pre><p>Set the font in the control.
</p><pre><b><a name="20">:M Enable: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( f -- )
</a></b></pre><p>Enable the control.
</p><pre><b><a name="21">:M Disable: &nbsp;&nbsp;&nbsp;&nbsp;( -- )
</a></b></pre><p>Disable the control.
</p><pre><b><a name="22">;Class
</a></b></pre><p>End of PushButton class
</p><a name="DefPushButton"></a>
<h2>DefPushButton class
</h2><pre><b><a name="23">:Class DefPushButton &nbsp;&nbsp;&nbsp;&lt;Super PushButton
</a></b></pre><p>Class for the default push buttons
</p><pre><b><a name="24">:M WindowStyle: ( -- style )
</a></b></pre><p>Get the window style of the control. Default style is: BS_DEFPUSHBUTTON.
</p><pre><b><a name="25">;Class
</a></b></pre><p>End of DefPushButton class
</p><a name="BitmapButton"></a>
<h2>BitmapButton class
</h2><pre><b><a name="26">:Class BitmapButton &nbsp;&nbsp;&nbsp;&nbsp;&lt;Super PushButton
</a></b></pre><p>BitmapButton control
</p><pre><b><a name="27">:M ClassInit: &nbsp;&nbsp;( -- )
</a></b></pre><p>Initialise the class.
</p><pre><b><a name="28">:M WindowStyle: ( -- style )
</a></b></pre><p>Get the window style of the control. Default style is: BS_BITMAP.
</p><pre><b><a name="29">;Class
</a></b></pre><p>End of BitmapButton class
</p><a name="IconButton"></a>
<h2>IconButton class
</h2><pre><b><a name="30">:Class IconButton &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Super PushButton
</a></b></pre><p>IconButton control
</p><pre><b><a name="31">:M ClassInit: &nbsp;&nbsp;( -- )
</a></b></pre><p>Initialise the class.
</p><pre><b><a name="32">:M WindowStyle: ( -- style )
</a></b></pre><p>Get the window style of the control. Default style is: BS_ICON.
</p><pre><b><a name="33">:M SetIcon: &nbsp;&nbsp;&nbsp;&nbsp;( hIcon -- )
</a></b></pre><p>set the icon image to use with the button
</p><pre><b><a name="34">:M GetIcon: &nbsp;&nbsp;&nbsp;&nbsp;( -- hIcon)
</a></b></pre><p>get the icon image used with the button
</p><pre><b><a name="35">;Class
</a></b></pre><p>End of IconButton class
</p><a name="GroupBox"></a>
<h2>GroupBox class
</h2><pre><b><a name="36">:Class GroupBox &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;super GroupControl
</a></b></pre><p>GroupBox control
(enhanced Version of the GroupControl class)
</p><pre><b><a name="37">:M Setfont: &nbsp;&nbsp;&nbsp;&nbsp;( handle -- )
</a></b></pre><p>Set the font in the control.
</p><pre><b><a name="38">:M Enable: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( f -- )
</a></b></pre><p>Enable the control.
</p><pre><b><a name="39">:M Disable: &nbsp;&nbsp;&nbsp;&nbsp;( -- )
</a></b></pre><p>Disable the control.
</p><pre><b><a name="40">;Class
</a></b></pre><p>End of GroupBox class
</p><a name="Label"></a>
<h2>Label class
</h2><pre><b><a name="0">:Class Label &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;super StaticControl
</a></b></pre><p>Class for static controls
</p><pre><b><a name="1">:M Setfont: &nbsp;&nbsp;&nbsp;&nbsp;( handle -- )
</a></b></pre><p>Set the font in the control.
</p><pre><b><a name="2">;Class
</a></b></pre><p>End of Label class
</p><a name="StaticImage"></a>
<h2>StaticImage class
</h2><pre><b><a name="3">|Class StaticImage &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Super Label
</a></b></pre><p>Base class for static control showing an image.
This is an internal class; don't use it directly.
</p><pre><b><a name="4">:M ImageType: &nbsp;&nbsp;( -- ImageType )
</a></b></pre><p>Get the image type of the control. <i>&nbsp;ImageType </i>&nbsp;is IMAGE_BITMAP.
</p><pre><b><a name="5">:M GetImage: &nbsp;&nbsp;&nbsp;( -- hImage )
</a></b></pre><p>Retrieve a handle to the image associated with the control.
</p><pre><b><a name="6">:M SetImage: &nbsp;&nbsp;&nbsp;( hImage -- )
</a></b></pre><p>Associate a new image (icon or bitmap) with the control.
</p><pre><b><a name="7">:M SetFont: &nbsp;&nbsp;&nbsp;&nbsp;( fhndl -- )
</a></b></pre><p>Set the font in the control.
</p><pre><b><a name="8">;Class
</a></b></pre><p>End of StaticImage class
</p><a name="StaticBitmap"></a>
<h2>StaticBitmap class
</h2><pre><b><a name="9">:Class StaticBitmap &nbsp;&nbsp;&nbsp;&nbsp;&lt;Super StaticImage
</a></b></pre><p>Static control showing a bitmap.
</p><pre><b><a name="10">:M WindowStyle: ( -- style )
</a></b></pre><p>Get the window style of the control. Default style is: SS_BITMAP.
</p><pre><b><a name="11">;Class
</a></b></pre><p>End of StaticImage class
</p><a name="StaticIcon"></a>
<h2>StaticIcon class
</h2><pre><b><a name="12">:Class StaticIcon &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Super StaticImage
</a></b></pre><p>Static control showing an icon.
</p><pre><b><a name="13">:M WindowStyle: ( -- style )
</a></b></pre><p>Get the window style of the control. Default style is: SS_ICON.
</p><pre><b><a name="14">:M ImageType: &nbsp;&nbsp;( -- ImageType )
</a></b></pre><p>Get the image type of the control. <i>&nbsp;ImageType </i>&nbsp;is IMAGE_ICON.
</p><pre><b><a name="15">;Class
</a></b></pre><p>End of StaticIcon class
</p><a name="StaticMetafile"></a>
<h2>StaticMetafile class
</h2><pre><b><a name="16">:Class StaticMetafile &nbsp;&nbsp;&lt;Super StaticImage
</a></b></pre><p>Static control showing an enhanced metafile.
</p><pre><b><a name="17">:M WindowStyle: ( -- style )
</a></b></pre><p>Get the window style of the control. Default style is: SS_ENHMETAFILE.
</p><pre><b><a name="18">:M ImageType: &nbsp;&nbsp;( -- ImageType )
</a></b></pre><p>Get the image type of the control. <i>&nbsp;ImageType </i>&nbsp;is IMAGE_ENHMETAFILE.
</p><pre><b><a name="19">;Class
</a></b></pre><p>End of StaticMetafile class
</p><a name="StaticFrame"></a>
<h2>StaticFrame class
</h2><pre><b><a name="20">:Class StaticFrame &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Super Label
</a></b></pre><p>Static control showing a frame.
</p><pre><b><a name="21">:M BlackRect: &nbsp;&nbsp;( -- )
</a></b></pre><p>Rectangle in the window frame color (default is black).
</p><pre><b><a name="22">:M GrayRect: &nbsp;&nbsp;&nbsp;( -- )
</a></b></pre><p>Rectangle in the screen background color (default is gray).
</p><pre><b><a name="23">:M WhiteRect: &nbsp;&nbsp;( -- )
</a></b></pre><p>Rectangle in the window background color (default is white).
</p><pre><b><a name="24">:M BlackFrame: &nbsp;( -- )
</a></b></pre><p>Frame in the window frame color (default is black).
</p><pre><b><a name="25">:M GrayFrame: &nbsp;&nbsp;( -- )
</a></b></pre><p>Frame in the screen background color (default is gray).
</p><pre><b><a name="26">:M WhiteFrame: &nbsp;( -- )
</a></b></pre><p>Frame in the window background color (default is white).
</p><pre><b><a name="27">:M EtchedFrame: ( -- )
</a></b></pre><p>draws an etched frame (frame appears lower than background)
</p><pre><b><a name="28">:M SunkenFrame: ( -- )
</a></b></pre><p>Draws frame with half-sunken border.
</p><pre><b><a name="29">;Class
</a></b></pre><p>End of StaticFrame class
</p><a name="Progressbar"></a>
<h2>Progressbar class
</h2><pre><b><a name="0">:Class Progressbar &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Super Control
</a></b></pre><p>Progressbar control
A progress bar is a window that an application can use to indicate the progress
of a lengthy operation. It consists of a rectangle that is gradually filled with
the system highlight color as an operation progresses.
</p><pre><b><a name="1">:M Start: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( Parent -- )
</a></b></pre><p>Create the control.
</p><pre><b><a name="2">:M +Value: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( n -- )
</a></b></pre><p>Advances the current position of the progress bar by a specified increment
and redraws the bar to reflect the new position.
</p><pre><b><a name="3">:M GetValue: &nbsp;&nbsp;&nbsp;( -- n )
</a></b></pre><p>Returns the current position of the progress bar.
</p><pre><b><a name="4">:M SetValue: &nbsp;&nbsp;&nbsp;( n -- )
</a></b></pre><p>Sets the current position for the progress bar and redraws the bar to
reflect the new position.
</p><pre><b><a name="5">:M SetRange: &nbsp;&nbsp;&nbsp;( min max -- )
</a></b></pre><p>Sets the minimum and maximum values for the progress bar and redraws the
bar to reflect the new range.
</p><p><i>&nbsp;min </i>&nbsp;is the minimum range value. By default, the minimum value is zero.
</p><p><i>&nbsp;max </i>&nbsp;is the maximum range value. By default, the maximum value is 100.
</p><pre><b><a name="6">:M SetStep: &nbsp;&nbsp;&nbsp;&nbsp;( n -- )
</a></b></pre><p>Specifies the step increment for the progress bar. The step increment is
</p><pre><b><a name="7">:M GetStep: &nbsp;&nbsp;&nbsp;&nbsp;( -- n )
</a></b></pre><p>Returns the current step increment for the progress bar.
</p><pre><b><a name="8">:M StepIt: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( -- )
</a></b></pre><p>Advances the current position for the progress bar by the step increment
and redraws the bar to reflect the new position.
</p><p>When the position exceeds the maximum range value, this method resets the current
position so that the progress indicator starts over again from the beginning.
</p><pre><b><a name="9">;Class
</a></b></pre><p>End of Progressbar class
</p><a name="SmoothProgressbar"></a>
<h2>SmoothProgressbar class
</h2><pre><b><a name="10">:Class SmoothProgressbar &lt;Super Progressbar
</a></b></pre><p>Progressbar control
A progress bar is a window that an application can use to indicate the progress
of a lengthy operation. It consists of a rectangle that is gradually filled with
the system highlight color as an operation progresses.
</p><p>The progress bar displays progress status in a smooth scrolling bar instead of the
default segmented bar.
</p><pre><b><a name="11">:M WindowStyle: ( -- style )
</a></b></pre><p>Get the window style of the control. Default style is: PBS_SMOOTH.
</p><pre><b><a name="12">;Class
</a></b></pre><p>End of SmoothProgressbar class
</p><a name="Trackbar"></a>
<h2>Trackbar class
</h2><pre><b><a name="0">:Class Trackbar &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Super Control
</a></b></pre><p>Trackbar control (horizontal)
</p><p>A trackbar is a window that contains a slider and optional tick marks.
When the user moves the slider, using either the mouse or the direction keys,
the trackbar sends notification messages to indicate the change.
</p><pre><b><a name="1">:M Start: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( Parent -- )
</a></b></pre><p>Create the control.
</p><pre><b><a name="2">:M GetLineSize: ( -- n )
</a></b></pre><p>Retrieves the number of logical positions the trackbar's slider moves in
response to keyboard input from the arrow keys, such as the RIGHT ARROW or
DOWN ARROW keys. The logical positions are the integer increments in the
trackbar's range of minimum to maximum slider positions.
</p><pre><b><a name="3">:M SetLineSize: ( n -- )
</a></b></pre><p>Sets the number of logical positions the trackbar's slider moves in
response to keyboard input from the arrow keys, such as the RIGHT ARROW or
DOWN ARROW keys. The logical positions are the integer increments in the
trackbar's range of minimum to maximum slider positions.
</p><pre><b><a name="4">:M GetPageSize: ( -- n )
</a></b></pre><p>Retrieves the number of logical positions the trackbar's slider moves in
response to keyboard input, such as the PAGE UP or PAGE DOWN keys, or mouse
input, such as clicks in the trackbar's channel. The logical positions are the
integer increments in the trackbar's range of minimum to maximum slider positions.
</p><pre><b><a name="5">:M SetPageSize: ( n -- )
</a></b></pre><p>Sets the number of logical positions the trackbar's slider moves in response to
keyboard input, such as the PAGE UP or PAGE DOWN keys, or mouse input, such as clicks
in the trackbar's channel. The logical positions are the integer increments in the
trackbar's range of minimum to maximum slider positions.
</p><pre><b><a name="6">:M GetValue: &nbsp;&nbsp;&nbsp;( -- n)
</a></b></pre><p>Retrieves the current logical position of the slider in the trackbar. The logical positions
are the integer values in the trackbar's range of minimum to maximum slider positions.
</p><pre><b><a name="7">:M SetValue: &nbsp;&nbsp;&nbsp;( n -- )
</a></b></pre><p>Sets the current logical position of the slider in the trackbar.
</p><pre><b><a name="8">:M GetRangeMax: ( -- n )
</a></b></pre><p>Retrieves the maximum position for the slider in the trackbar.
</p><pre><b><a name="9">:M SetRangeMax: ( max f -- )
</a></b></pre><p>Sets the maximum logical position for the slider in the trackbar.
</p><p>If the <i>&nbsp;f </i>&nbsp;is TRUE, the trackbar is redrawn after the range is set.
If this parameter is FALSE, the message sets the range but does not redraw
the trackbar.
</p><pre><b><a name="10">:M GetRangeMin: ( -- n )
</a></b></pre><p>Retrieves the minimum position for the slider in the trackbar.
</p><pre><b><a name="11">:M SetRangeMin: ( min f -- )
</a></b></pre><p>Sets theminimum logical position for the slider in the trackbar.
</p><p>If the <i>&nbsp;f </i>&nbsp;is TRUE, the trackbar is redrawn after the range is set.
If this parameter is FALSE, the message sets the range but does not redraw
the trackbar.
</p><pre><b><a name="12">:M GetSelEnd: &nbsp;&nbsp;( -- n )
</a></b></pre><p>Retrieves the ending position of the current selection range in the trackbar.
A trackbar can have a selection range only if you specified the TBS_ENABLESELRANGE
style when you created it.
</p><pre><b><a name="13">:M SetSelEnd: &nbsp;&nbsp;( end f -- )
</a></b></pre><p>Sets the ending logical position of the current selection range in a trackbar.
This message is ignored if the trackbar does not have the TBS_ENABLESELRANGE style.
</p><p>If the <i>&nbsp;f </i>&nbsp;is TRUE, the trackbar is redrawn after the range is set.
If this parameter is FALSE, the message sets the range but does not redraw
the trackbar.
</p><pre><b><a name="14">:M GetSelStart: ( -- n)
</a></b></pre><p>Retrieves the starting position of the current selection range in the trackbar.
A trackbar can have a selection range only if you specified the TBS_ENABLESELRANGE
style when you created it.
</p><pre><b><a name="15">:M SetSelStart: ( start f -- )
</a></b></pre><p>Sets the starting logical position of the current selection range in the trackbar.
This message is ignored if the trackbar does not have the TBS_ENABLESELRANGE style.
</p><p>If the <i>&nbsp;f </i>&nbsp;is TRUE, the trackbar is redrawn after the range is set.
If this parameter is FALSE, the message sets the range but does not redraw
the trackbar.
</p><pre><b><a name="16">:M GetThumbLength: ( -- n )
</a></b></pre><p>Retrieves the length (in Pixel) of the slider in the trackbar.
</p><pre><b><a name="17">:M SetThumbLength: ( n -- )
</a></b></pre><p>Set the length (in Pixel) of the slider in the trackbar.
</p><pre><b><a name="18">:M GetChannelRect: ( lpRect -- )
</a></b></pre><p>Retrieves the size and position of the bounding rectangle for the
trackbar's channel. (The channel is the area over which the slider
moves. It contains the highlight when a range is selected.)
</p><pre><b><a name="19">:M GetThumbRect: ( lpRect -- )
</a></b></pre><p>Retrieves the size and position of the bounding rectangle for the slider
in the trackbar.
</p><pre><b><a name="20">:M GetTick: &nbsp;&nbsp;&nbsp;&nbsp;( iTic -- n )
</a></b></pre><p>Retrieves the logical position of a tick mark in a trackbar. The logical
position can be any of the integer values in the trackbar's range of minimum
to maximum slider positions.
</p><pre><b><a name="21">:M SetTick: &nbsp;&nbsp;&nbsp;&nbsp;( pos -- )
</a></b></pre><p>Sets a tick mark in a trackbar at the specified logical position.
</p><pre><b><a name="22">:M ClearTicks: &nbsp;( f -- )
</a></b></pre><p>Removes the current tick marks from a trackbar. This message does not remove
the first and last tick marks, which are created automatically by the trackbar.
</p><p>If the <i>&nbsp;f </i>&nbsp;is TRUE, the trackbar is redrawn after the tick marks are cleared.
If this parameter is FALSE, the message clears the tick marks but does not redraw
the trackbar.
</p><pre><b><a name="23">:M GetTickPos: &nbsp;( iTic -- n )
</a></b></pre><p>Retrieves the current physical position of a tick mark in a trackbar.
</p><pre><b><a name="24">:M GetTicksPtr: ( -- pointer )
</a></b></pre><p>Retrieves the address of an array that contains the positions of the tick marks
for a trackbar.
</p><p>Returns the address of an array of DWORD values. The elements of the array specify
the logical positions of the trackbar's tick marks, not including the first and last
tick marks created by the trackbar. The logical positions can be any of the integer
values in the trackbar's range of minimum to maximum slider positions.
</p><p>The number of elements in the array is two less than the tick count returned by the
GetNumTicks: method. Note that the values in the array may include duplicate positions
and may not be in sequential order. The returned pointer is valid until you change the
trackbar's tick marks.
</p><pre><b><a name="25">:M SetTickFreq: ( pos freq -- )
</a></b></pre><p>Sets the interval frequency for tick marks in a trackbar. For example, if the frequency
is set to two, a tick mark is displayed for every other increment in the trackbar's range.
The default setting for the frequency is one; that is, every increment in the range is
associated with a tick mark.
</p><p>The trackbar must have the TBS_AUTOTICKS style to use this method.
</p><pre><b><a name="26">:M GetNumTicks: ( -- n )
</a></b></pre><p>Retrieves the number of tick marks in the trackbar.
</p><p>The GetNumTicks: method counts all of the tick marks, including the first and last tick
marks created by the trackbar.
</p><pre><b><a name="27">:M SetRange: &nbsp;&nbsp;&nbsp;( min max f -- )
</a></b></pre><p>Sets the range of minimum and maximum logical positions for the slider in the trackbar.
</p><p>If the <i>&nbsp;f </i>&nbsp;parameter is TRUE, the trackbar is redrawn after the range is set. If this
parameter is FALSE, the message sets the range but does not redraw the trackbar.
</p><pre><b><a name="28">:M SetSel: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( min max f -- )
</a></b></pre><p>Sets the starting and ending positions for the available selection range in the trackbar.
</p><p>If the <i>&nbsp;f </i>&nbsp;is TRUE, the message redraws the trackbar after the selection range is set.
If this parameter is FALSE, the message sets the selection range but does not redraw the trackbar.
</p><p>This method is ignored if the trackbar does not have the TBS_ENABLESELRANGE style.
</p><pre><b><a name="29">:M ClearSel: &nbsp;&nbsp;&nbsp;( f -- )
</a></b></pre><p>Clears the current selection range in the trackbar.
</p><p>If the <i>&nbsp;f </i>&nbsp;is TRUE, the trackbar is redrawn after the selection is cleared.
</p><pre><b><a name="30">:M Enable: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( f -- )
</a></b></pre><p>Enable the control.
</p><pre><b><a name="31">:M Disable: &nbsp;&nbsp;&nbsp;&nbsp;( -- )
</a></b></pre><p>Disable the control.
</p><pre><b><a name="32">;Class
</a></b></pre><p>End of Trackbar class
</p><a name="VTrackBar"></a>
<h2>VTrackBar class
</h2><pre><b><a name="33">:Class VTrackBar &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;super TrackBar
</a></b></pre><p>Trackbar control (vertical)
</p><p>A trackbar is a window that contains a slider and optional tick marks.
When the user moves the slider, using either the mouse or the direction keys,
the trackbar sends notification messages to indicate the change.
</p><pre><b><a name="34">:M WindowStyle: ( -- style )
</a></b></pre><p>Get the window style of the control. Default style is: TBS_VERT.
</p><pre><b><a name="35">;Class
</a></b></pre><p>End of VTrackBar class
</p><a name="ScrollBar"></a>
<h2>ScrollBar class
</h2><pre><b><a name="0">|Class ScrollBar &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Super Control
</a></b></pre><p>Scrollbar control
Note: this is an internal class. Don't use it directly.
</p><pre><b><a name="1">:M ClassInit: &nbsp;&nbsp;( -- )
</a></b></pre><p>Initialise the class.
</p><pre><b><a name="2">:M Start: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( Parent -- )
</a></b></pre><p>Create the control.
</p><pre><b><a name="3">:M SetFont: &nbsp;&nbsp;&nbsp;&nbsp;( hndl -- )
</a></b></pre><p>Set the font in the control.
Note that this is a dummy method in this class.
</p><pre><b><a name="4">:M Enable: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( f -- )
</a></b></pre><p>Enable the control.
</p><pre><b><a name="5">:M Disable: &nbsp;&nbsp;&nbsp;&nbsp;( -- )
</a></b></pre><p>Disable the control.
</p><a name="HorizScroll"></a>
<h2>HorizScroll class
</h2><pre><b><a name="6">:Class HorizScroll &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Super ScrollBar
</a></b></pre><p>Scrollbar control (vorizontal).
</p><pre><b><a name="7">:M WindowStyle: ( -- style )
</a></b></pre><p>Get the window style of the control. Default style is: SBS_HORZ.
</p><pre><b><a name="8">;Class
</a></b></pre><p>End of HorizScroll class
</p><a name="VertScroll"></a>
<h2>VertScroll class
</h2><pre><b><a name="9">:Class VertScroll &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Super ScrollBar
</a></b></pre><p>Scrollbar control (vertical).
</p><pre><b><a name="10">:M WindowStyle: ( -- style )
</a></b></pre><p>Get the window style of the control. Default style is: SBS_VERT.
</p><pre><b><a name="11">;Class
</a></b></pre><p>End of VertScroll class
</p><a name="SizeBox"></a>
<h2>SizeBox class
</h2><pre><b><a name="12">:Class SizeBox &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Super ScrollBar
</a></b></pre><p>Size box control.
</p><pre><b><a name="13">:M WindowStyle: ( -- style )
</a></b></pre><p>Get the window style of the control. Default style is: SBS_SIZEGRIP.
</p><pre><b><a name="14">;Class
</a></b></pre><p>End of SizeBox class
</p><p>The MonthCalendar and TimeDatePicker controls both use a structure, the members
of which are;
</p><h3><i>Year
</i></h3><p>The year (1601 - 30827).

Month

January = 1
February = 2
March = 3
April = 4
May = 5
June = 6
July = 7
August = 8
September = 9
October = 10
November = 11
December = 12

DayOfWeek

Sunday = 0
Monday = 1
Tuesday = 2
Wednesday = 3
Thursday = 4
Friday = 5
Saturday = 6

Day
The day of the month (0-31).
Hour
The hour (0-23).
Minute
The minute(s) (0-59).
Second
The second(s) (0-59).
Milliseconds
The millisecond(s) (0-999).
</p><a name="MonthCalendar"></a>
<h2>MonthCalendar class
</h2><pre><b><a name="0">:Class MonthCalendar &nbsp;&nbsp;&nbsp;&lt;Super DateTimeControl
</a></b></pre><p>Month Calendar control.
A month calendar control implements a calendar-like user interface. This
provides the user with a very intuitive and recognizable method of entering
or selecting a date.
</p><pre><b><a name="1">:M Start: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( Parent -- )
</a></b></pre><p>Create the control.
</p><pre><b><a name="2">:M MinSize: &nbsp;&nbsp;&nbsp;&nbsp;( -- x y )
</a></b></pre><p>Return minimum size required to display a month.
</p><pre><b><a name="3">:M GetDate: &nbsp;&nbsp;&nbsp;&nbsp;( -- day month year )
</a></b></pre><p>Retrieves the currently selected date.
</p><p><i>&nbsp;day </i>&nbsp;is the day of the month (0-31).
</p><p><i>&nbsp;Month </i>&nbsp;is the month (January = 1; December = 12)
</p><p><i>&nbsp;year </i>&nbsp;is the year (1601 - 30827).
</p><pre><b><a name="4">:M GetToday: &nbsp;&nbsp;&nbsp;( -- day month year )
</a></b></pre><p>Retrieves the date information for the date specified as &quot;today&quot;.
</p><p><i>&nbsp;day </i>&nbsp;is the day of the month (0-31).
</p><p><i>&nbsp;Month </i>&nbsp;is the month (January = 1; December = 12)
</p><p><i>&nbsp;year </i>&nbsp;is the year (1601 - 30827).
</p><pre><b><a name="5">;Class
</a></b></pre><p>End of MonthCalendar class
</p><a name="DateTimePicker"></a>
<h2>DateTimePicker class
</h2><pre><b><a name="6">:Class DateTimePicker &nbsp;&nbsp;&lt;Super DateTimeControl
</a></b></pre><p>Date and Time Picker control
</p><pre><b><a name="7">:M Start: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( Parent -- )
</a></b></pre><p>Create the control.
</p><p>Date and Time Picker Control Styles <br />

The window styles listed here are specific to date and time picker controls. <br />

Constants <br />
DTS_APPCANPARSE <br />
Allows the owner to parse user input and take necessary action. It enables users
to edit within the client area of the control when they press the F2 key.
The control sends DTN_USERSTRING notification messages when users are finished. <br />

DTS_LONGDATEFORMAT <br />
Displays the date in long format. The default format string for this style is
defined by LOCALE_SLONGDATEFORMAT, which produces output like &quot;Friday, April
19, 1996&quot;. <br />

DTS_RIGHTALIGN <br />
The drop-down month calendar will be right-aligned with the control instead of
left-aligned, which is the default. <br />

DTS_SHOWNONE <br />
It is possible to have no date currently selected in the control. With this style,
the control displays a check box that users can check once they have entered or
selected a date. Until this check box is checked, the application will not be
able to retrieve the date from the control because, in essence, the control has
no date. This state can be set with the DTM_SETSYSTEMTIME message or queried
with the DTM_GETSYSTEMTIME message. <br />

DTS_SHORTDATEFORMAT <br />
Displays the date in short format. The default format string for this style is
defined by LOCALE_SSHORTDATE, which produces output like &quot;4/19/96&quot;. <br />

DTS_SHORTDATECENTURYFORMAT <br />
Version 5.80. Similar to the DTS_SHORTDATEFORMAT style, except the year is a
four-digit field. The default format string for this style is based on
LOCALE_SSHORTDATE. The output looks like: &quot;4/19/1996&quot;. <br />

DTS_TIMEFORMAT <br />
Displays the time. The default format string for this style is defined by
LOCALE_STIMEFORMAT, which produces output like &quot;5:31:42 PM&quot;. <br />

DTS_UPDOWN <br />
Places an up-down control to the right of the DTP control to modify date-time
values. This style can be used in place of the drop-down month calendar, which
is the default style. <br />

Remarks <br />

The DTS_XXXFORMAT styles that define the display format cannot be combined.
If none of the format styles are suitable, use a DTM_SETFORMAT message to
define a custom format.
</p><pre><b><a name="8">:M SetCustomFormat: &nbsp;&nbsp;( z&quot;format&quot; &nbsp;-- )
</a></b></pre><p>set the display format for time or date
</p><p>Format Strings
A DTP format string consists of a series of elements that represent a particular
piece of information and define its display format. The elements will be displayed
in the order they appear in the format string. <br />

Date and time format elements will be replaced by the actual date and time. They are
defined by the following groups of characters: <br />

Element &nbsp;&nbsp;&nbsp;&nbsp;Description <br />
&quot;d&quot; &nbsp;&nbsp;&nbsp;&nbsp;The one- or two-digit day. <br />
&quot;dd&quot; &nbsp;&nbsp;&nbsp;The two-digit day. Single-digit day values are preceded by a zero. <br />
&quot;ddd&quot; &nbsp;&nbsp;The three-character weekday abbreviation. <br />
&quot;dddd&quot; &nbsp;The full weekday name. <br />
&quot;h&quot; &nbsp;&nbsp;&nbsp;&nbsp;The one- or two-digit hour in 12-hour format. <br />
&quot;hh&quot; &nbsp;&nbsp;&nbsp;The two-digit hour in 12-hour format. Single-digit values are preceded by
a zero. <br />
&quot;H&quot; &nbsp;&nbsp;&nbsp;&nbsp;The one- or two-digit hour in 24-hour format. <br />
&quot;HH&quot; &nbsp;&nbsp;&nbsp;The two-digit hour in 24-hour format. Single-digit values are preceded by
a zero. <br />
&quot;m&quot; &nbsp;&nbsp;&nbsp;&nbsp;The one- or two-digit minute. <br />
&quot;mm&quot; &nbsp;&nbsp;&nbsp;The two-digit minute. Single-digit values are preceded by a zero. <br />
&quot;M&quot; &nbsp;&nbsp;&nbsp;&nbsp;The one- or two-digit month number. <br />
&quot;MM&quot; &nbsp;&nbsp;&nbsp;The two-digit month number. Single-digit values are preceded by a zero. <br />
&quot;MMM&quot; &nbsp;&nbsp;The three-character month abbreviation. <br />
&quot;MMMM&quot; &nbsp;The full month name. <br />
&quot;t&quot; &nbsp;&nbsp;&nbsp;&nbsp;The one-letter AM/PM abbreviation (that is, AM is displayed as &quot;A&quot;). <br />
&quot;tt&quot; &nbsp;&nbsp;&nbsp;The two-letter AM/PM abbreviation (that is, AM is displayed as &quot;AM&quot;). <br />
&quot;yy&quot; &nbsp;&nbsp;&nbsp;The last two digits of the year (that is, 1996 would be displayed as &quot;96&quot;). <br />
&quot;yyyy&quot; &nbsp;The full year (that is, 1996 would be displayed as &quot;1996&quot;). <br />

To make the information more readable, you can add body text to the format string
by enclosing it in single quotes. Spaces and punctuation marks do not need to be
quoted. <br />

<b>&nbsp;Note </b>&nbsp;&nbsp;&nbsp;Nonformat characters that are not delimited by single quotes will
result in unpredictable display by the DTP control. <br />

For example, to display the current date with the format
&quot;'Today is: 04:22:31 Tuesday Mar 23, 1996&quot;, the format string is
&quot;'Today is: 'hh':'m':'s dddd MMM dd', 'yyyy&quot;. To include a single quote in your
body text, use two consecutive single quotes. For example,
&quot;'Don''t forget' MMM dd',' yyyy&quot; produces output that looks like: <br />
Don't forget Mar 23, 1996. <br />
It is not necessary to use quotes with the comma, so
&quot;'Don''t forget' MMM dd, yyyy&quot; is also valid, and produces the same output.
</p><pre><b><a name="9">:M GetTime: &nbsp;&nbsp;&nbsp;&nbsp;( -- hrs min secs )
</a></b></pre><p>get user selected time
</p><pre><b><a name="10">:M SetTime: &nbsp;&nbsp;&nbsp;&nbsp;( hr min sec -- )
</a></b></pre><p>set time for user to edit
</p><pre><b><a name="11">:M GetDate: &nbsp;&nbsp;&nbsp;&nbsp;( -- day month year )
</a></b></pre><p>get user selected date
</p><pre><b><a name="12">;Class
</a></b></pre><p>End of DateTimePicker class
</p><a name="TabControl"></a>
<h2>TabControl class
</h2><pre><b><a name="0">:Class TabControl &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Super Control
</a></b></pre><p>Tab control.
</p><p>A tab control is analogous to the dividers in a notebook or the labels in a
file cabinet. By using a tab control, an application can define multiple pages
for the same area of a window or dialog box. Each page consists of a certain
type of information or a group of controls that the application displays when
the user selects the corresponding tab.
</p><pre><b><a name="1">Record: tc_Item
</a></b></pre><p>The TCITEM struct.
</p><pre><b><a name="2">:M IsMask: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( n -- )
</a></b></pre><p>Set the <i>&nbsp;mask </i>&nbsp;member of the TCITEM struct. Possible values are:
</p><table border="1"><tr><td>TCIF_TEXT
</td>
<td>The pszText member is valid.
</td>
</tr>
<tr><td>TCIF_IMAGE
</td>
<td>The iImage member is valid.
</td>
</tr>
<tr><td>TCIF_PARAM
</td>
<td>The lParam member is valid.
</td>
</tr>
<tr><td>TCIF_RTLREADING
</td>
<td>Displays the text of pszText using right-to-left reading order on Hebrew or Arabic systems.
</td>
</tr>
</table><pre><b><a name="3">:M Mask: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( -- n )
</a></b></pre><p>Get the <i>&nbsp;mask </i>&nbsp;member of the TCITEM struct.
</p><pre><b><a name="4">:M IsPszText: &nbsp;&nbsp;( addr -- )
</a></b></pre><p>Set the <i>&nbsp;mask </i>&nbsp;member of the TCITEM struct.
</p><pre><b><a name="5">:M PszText: &nbsp;&nbsp;&nbsp;&nbsp;( -- n )
</a></b></pre><p>Get the <i>&nbsp;pszText </i>&nbsp;member of the TCITEM struct.
</p><pre><b><a name="6">:M IscchTextMax: ( n -- )
</a></b></pre><p>Set the <i>&nbsp;pszText </i>&nbsp;member of the TCITEM struct.
</p><pre><b><a name="7">:M cchTextMax: &nbsp;( -- n )
</a></b></pre><p>Get the <i>&nbsp;cchTextmax </i>&nbsp;member of the TCITEM struct.
</p><pre><b><a name="8">:M IsiImage: &nbsp;&nbsp;&nbsp;( n -- )
</a></b></pre><p>Set the <i>&nbsp;iImage </i>&nbsp;member of the TCITEM struct.
</p><pre><b><a name="9">:M iImage: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( -- n )
</a></b></pre><p>Get the <i>&nbsp;iImage </i>&nbsp;member of the TCITEM struct.
</p><pre><b><a name="10">:M IsLparam: &nbsp;&nbsp;&nbsp;( n -- )
</a></b></pre><p>Set the <i>&nbsp;lparam </i>&nbsp;member of the TCITEM struct.
</p><pre><b><a name="11">:M LParam: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( -- n )
</a></b></pre><p>Get the <i>&nbsp;lparam </i>&nbsp;member of the TCITEM struct.
</p><pre><b><a name="12">:M WindowStyle: ( -- style )
</a></b></pre><p>Get the window style of the control. Default style is: TCS_FOCUSONBUTTONDOWN.
</p><pre><b><a name="13">\ :M AddStyle: &nbsp;&nbsp;&nbsp;( n -- )
</a></b></pre><p>Set any additional style of the control. Must be done before the control
is created. Possible values are:
</p><table border="1"><tr><td>TCS_BOTTOM
</td>
<td>Tabs appear at the bottom of the control. This value equals TCS_RIGHT.
</td>
</tr>
<tr><td>TCS_BUTTONS
</td>
<td>Tabs appear as buttons, and no border is drawn around the display area.
</td>
</tr>
<tr><td>TCS_FIXEDWIDTH
</td>
<td>All tabs are the same width. This style cannot be combined with the TCS_RIGHTJUSTIFY style.
</td>
</tr>
<tr><td>TCS_FLATBUTTONS
</td>
<td>Selected tabs appear as being indented into the background while other tabs appear as being on the same plane as the background. This style only affects tab controls with the TCS_BUTTONS style.
</td>
</tr>
<tr><td>TCS_FOCUSNEVER
</td>
<td>The tab control does not receive the input focus when clicked.
</td>
</tr>
<tr><td>TCS_FOCUSONBUTTONDOWN
</td>
<td>The tab control receives the input focus when clicked.
</td>
</tr>
<tr><td>TCS_FORCEICONLEFT
</td>
<td>Icons are aligned with the left edge of each fixed-width tab. This style can only be used with the TCS_FIXEDWIDTH style.
</td>
</tr>
<tr><td>TCS_FORCELABELLEFT
</td>
<td>Labels are aligned with the left edge of each fixed-width tab; that is, the label is displayed immediately to the right of the icon instead of being centered.
</td>
</tr>
<tr><td>TCS_HOTTRACK
</td>
<td>Items under the pointer are automatically highlighted. You can check whether or not hot tracking is enabled by calling SystemParametersInfo.
</td>
</tr>
<tr><td>TCS_MULTILINE
</td>
<td>Multiple rows of tabs are displayed, if necessary, so all tabs are visible at once.
</td>
</tr>
<tr><td>TCS_MULTISELECT
</td>
<td>Multiple tabs can be selected by holding down CTRL when clicking. This style must be used with the TCS_BUTTONS style.
</td>
</tr>
<tr><td>TCS_OWNERDRAWFIXED
</td>
<td>The parent window is responsible for drawing tabs.
</td>
</tr>
<tr><td>TCS_RAGGEDRIGHT
</td>
<td>Rows of tabs will not be stretched to fill the entire width of the control. This style is the default.
</td>
</tr>
<tr><td>TCS_RIGHT
</td>
<td>Tabs appear vertically on the right side of controls that use the TCS_VERTICAL style. This value equals TCS_BOTTOM.
</td>
</tr>
<tr><td>TCS_RIGHTJUSTIFY
</td>
<td>The width of each tab is increased, if necessary, so that each row of tabs fills the entire width of the tab control.
</td>
</tr>
<tr><td>TCS_SCROLLOPPOSITE
</td>
<td>Unneeded tabs scroll to the opposite side of the control when a tab is selected.
</td>
</tr>
<tr><td>TCS_SINGLELINE
</td>
<td>Only one row of tabs is displayed. The user can scroll to see more tabs, if necessary. This style is the default.
</td>
</tr>
<tr><td>TCS_TABS
</td>
<td>Tabs appear as tabs, and a border is drawn around the display area. This style is the default.
</td>
</tr>
<tr><td>TCS_TOOLTIPS
</td>
<td>The tab control has a tooltip control associated with it.
</td>
</tr>
<tr><td>TCS_VERTICAL
</td>
<td>Tabs appear at the left side of the control, with tab text displayed vertically. This style is valid only when used with the TCS_MULTILINE style. To make tabs appear on the right side of the control, also use the TCS_RIGHT style.
</td>
</tr>
</table><pre><b><a name="14">:M TC_Item: &nbsp;&nbsp;&nbsp;&nbsp;( -- addr )
</a></b></pre><p>Get the address of the TCITEM struct.
</p><pre><b><a name="15">:M InsertTab: &nbsp;&nbsp;( index -- )
</a></b></pre><p>Inserts a new tab into the tab control.
</p><p><i>&nbsp;mask </i>&nbsp;and other members of the TCITEM struct must be set.
</p><pre><b><a name="16">:M GetTabInfo: &nbsp;( index -- )
</a></b></pre><p>Retrieves information about a tab in the tab control.
</p><pre><b><a name="17">:M SetTabInfo: &nbsp;( index -- )
</a></b></pre><p>Sets some or all of a tab's attributes.
</p><p><i>&nbsp;mask </i>&nbsp;and other members of the TCITEM struct must be set.
</p><pre><b><a name="18">:M GetTabCount: ( -- n )
</a></b></pre><p>Retrieves the number of tabs in the tab control.
</p><pre><b><a name="19">:M DeleteTab: &nbsp;&nbsp;( index -- )
</a></b></pre><p>Removes an item from the tab control.
</p><pre><b><a name="20">:M DeleteAllTabs: &nbsp;&nbsp;( -- )
</a></b></pre><p>Removes all items from the tab control.
</p><pre><b><a name="21">:M AdjustRect: &nbsp;( rect flag -- )
</a></b></pre><p>Calculates a tab control's display area given a window rectangle, or
calculates the window rectangle that would correspond to a specified
display area.
</p><p><i>&nbsp;rect </i>&nbsp;is the address of a RECT structure that specifies the given rectangle
and receives the calculated rectangle.
</p><p><i>&nbsp;flag </i>&nbsp;If this parameter is TRUE, prc specifies a display rectangle and receives
the corresponding window rectangle. If this parameter is FALSE, prc specifies a window
rectangle and receives the corresponding display area.
</p><pre><b><a name="22">:M ClientSize: &nbsp;( -- l t r b )
</a></b></pre><p>Return size of display area of the tab control.
</p><pre><b><a name="23">:M WindowSize: &nbsp;( l t r t -- l t r b )
</a></b></pre><p>Given display area return window size required.
</p><pre><b><a name="24">:M GetSelectedTab: ( -- index )
</a></b></pre><p>Determines the currently selected tab in the tab control.
</p><pre><b><a name="25">:M SetSelectedTab: ( index -- &nbsp;)
</a></b></pre><p>Selects a tab in the tab control.
</p><p>Note: A tab control does not send a TCN_SELCHANGING or TCN_SELCHANGE
notification message when a tab is selected using this message.
</p><pre><b><a name="26">:M GetRowCount: ( -- n )
</a></b></pre><p>Retrieves the current number of rows of tabs in a tab control.
</p><pre><b><a name="27">:M Enable: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( f -- )
</a></b></pre><p>Enable the control.
</p><pre><b><a name="28">:M Disable: &nbsp;&nbsp;&nbsp;&nbsp;( -- )
</a></b></pre><p>Disable the control.
</p><pre><b><a name="29">:M Setfont: &nbsp;&nbsp;&nbsp;&nbsp;( handle -- )
</a></b></pre><p>Set the font in the control.
</p><pre><b><a name="30">:M WindowTitle: ( -- null$ )
</a></b></pre><p>SintillaControl asks for window title of parent
</p><pre><b><a name="31">:M Handle_Notify: &nbsp;{ w l \ ncode tabid -- f }
</a></b></pre><p>Handle the notification messages of the tab control. This method must
be called within the WM_NOTIFY handler of the parent window.
</p><p>Currently only these notification messages are handled:
</p><table border="1"><tr><td>TCN_SELCHANGE
</td>
<td>Notifies a tab control's parent window that the currently selected tab has changed.
</td>
</tr>
<tr><td>TCN_SELCHANGING
</td>
<td>Notifies a tab control's parent window that the currently selected tab is about to change.
</td>
</tr>
</table><pre><b><a name="32">:M On_SelChanged: &nbsp;( l -- f )
</a></b></pre><p>Handle the TCN_SELCHANGE notification message.
Default calls the <i>&nbsp;change function </i>&nbsp;set with the <i>&nbsp;IsChangeFunc: </i>&nbsp;method.
</p><pre><b><a name="33">:M On_SelChanging: ( l -- f )
</a></b></pre><p>Handle the TCN_SELCHANGING notification message.
Default calls the <i>&nbsp;changeing function </i>&nbsp;set with the <i>&nbsp;IsChangingFunc: </i>&nbsp;method.
</p><pre><b><a name="34">:M IsChangeFunc: &nbsp;&nbsp;( cfa -- )
</a></b></pre><p>Set the <i>&nbsp;change function </i>. This function es executed when
the currently selected tab has changed.
</p><pre><b><a name="35">:M IsChangingFunc: ( cfa -- )
</a></b></pre><p>Set the <i>&nbsp;changeing function </i>. This function es executed when
the currently selected tab is about to change.
</p><pre><b><a name="36">: default-func &nbsp;&nbsp;&nbsp;&nbsp;( lParam obj -- false )
</a></b></pre><p>The default <i>&nbsp;change(-ing) function </i>.
</p><p><i>&nbsp;lParam </i>&nbsp;is the adress of the Address of an NMHDR structure.
<i>&nbsp;obj </i>&nbsp;is the address of the TabControl object that has send the
notification message.
</p><pre><b><a name="37">:M ClassInit: &nbsp;&nbsp;( -- )
</a></b></pre><p>Initialise the class.
</p><pre><b><a name="38">:M Start: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( Parent -- )
</a></b></pre><p>Create the control.
</p><pre><b><a name="39">;Class
</a></b></pre><p>End of TabControl class
</p><a name="MultiLineTabControl"></a>
<h2>MultiLineTabControl class
</h2><pre><b><a name="40">:Class MultiLineTabControl &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Super TabControl
</a></b></pre><p>Multiline Tab control.
Multiple rows of tabs are displayed, if necessary, so all tabs are visible at once.
</p><pre><b><a name="41">;class
</a></b></pre><p>End of MultiLineTabControl class
</p><p>For a demo how to use the TabControl see: TabControlDemo.f
</p><hr /><h1>ExControls -- More (enhanced) classes for non-standard windows controls.
</h1><hr /><a name="VertButtonBar"></a>
<h2>VertButtonBar class
</h2><pre><b><a name="0">:Class VertButtonBar &nbsp;&nbsp;&nbsp;&lt;super VButtonBar
</a></b></pre><p>VertButtonBar control
</p><p>This is an enhanced Version of the VButtonBar class.
</p><p>Note: this control isn't one of the standard control of MS windows.
</p><pre><b><a name="1">:M SetFont: &nbsp;&nbsp;&nbsp;&nbsp;{ fonthndl \ hb1 -- }
</a></b></pre><p>Set the font in the control.
</p><pre><b><a name="2">:M Enable: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ flag \ hb1 -- }
</a></b></pre><p>Enable the control.
</p><pre><b><a name="3">:M Disable: &nbsp;&nbsp;&nbsp;&nbsp;( -- )
</a></b></pre><p>Disable the control.
</p><pre><b><a name="4">;Class
</a></b></pre><p>End of VertButtonBar class
</p><a name="HorizButtonBar"></a>
<h2>HorizButtonBar class
</h2><pre><b><a name="5">:Class HorizButtonBar &nbsp;&nbsp;&lt;super HButtonBar
</a></b></pre><p>HorizButtonBar control
</p><p>This is an enhanced Version of the HButtonBar class.
</p><p>Note: this control isn't one of the standard control of MS windows.
</p><pre><b><a name="6">:M SetFont: &nbsp;&nbsp;&nbsp;&nbsp;{ fonthndl \ hb1 -- }
</a></b></pre><p>Set the font in the control.
</p><pre><b><a name="7">:M Enable: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ flag \ hb1 -- }
</a></b></pre><p>Enable the control.
</p><pre><b><a name="8">:M Disable: &nbsp;&nbsp;&nbsp;&nbsp;( -- )
</a></b></pre><p>Disable the control.
</p><pre><b><a name="9">;Class
</a></b></pre><p>End of HorizButtonBar class
</p><hr><p>Document $Id: W32fdexh.f,v 1.8 2008/12/23 21:12:06 camilleforth Exp $</p>
</body></html>
