<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
    <title>Win32Forth Help</title>
    <link rel="stylesheet" type="text/css" href="style.css">
</head>
<body>

<h1>Object Oriented Programming</h1>

<p>This document was originally written by Andrew McKewan; the original copyright lies with him.
This is now an old document and some parts may not be accurate (ie : the "implementation" part)
but the essentials of Win32Forth object oriented programming are there</p>

<h2>Table of Contents</h2>

<ul>
  <li><b><a href="#Concepts">Concepts</a></b></li>
  <ul>
    <li><a href="#Creating_and_Deleting_Dynamic_Objects">Creating and Deleting Dynamic Objects </a></li>
    <li><a href="#Building_Contiguous_Data_Fields_in_a_Cl">Building Contiguous Data Fields in a Class </li>
  </ul>
  <li><b><a href="#Advanced_Notes">Advanced Notes</a></b></li>
  <ul>
    <li><a href="#Object-Oriented_Programming_in_ANS_Fort">Object-Oriented Programming in ANS Forth [by Andrew McKewan] </a></li>
    <li><a href="#Why_I_am_doing_this">Why I am doing this </a></li>
    <li><a href="#Object-Oriented_Concepts">Object-Oriented Concepts </a></li>
    <li><a href="#How_to_Define_a_Class">How to Define a Class </a></li>
    <li><a href="#Creating_an_Instance_of_a_Class">Creating an Instance of a Class </a></li>
    <li><a href="#Sending_Message_to_Yourself">Sending Message to Yourself </a></li>
    <li><a href="#Creating_a_Subclass">Creating a Subclass </a></li>
    <li><a href="#Sending_Message_to_Your_Superclass">Sending Message to Your Superclass </a></li>
    <li><a href="#Indexed_Instance_Variables">Indexed Instance Variables </a></li>
    <li><a href="#Early_vs._Late_Binding">Early vs. Late Binding </a></li>
    <li><a href="#Class_Binding">Class Binding </a></li>
    <li><a href="#Creating_Objects_on_the_Heap">Creating Objects on the Heap </a></li>
    <li><a href="#Implementation">Implementation </a></li>
    <ul>
      <li><a href="#Class_Structure">Class Structure </a></li>
      <li><a href="#Object_Structure">Object Structure </a></li>
      <li><a href="#Instance_Variable_Structure">Instance Variable Structure </a></li>
      <li><a href="#Method_Structure">Method Structure </a></li>
      <li><a href="#Selectors_are_Special_Words">Selectors are Special Words </a></li>
      <li><a href="#Object_Initialization">Object Initialization </a></li>
    </ul>
    <li><a href="#Example_Classes">Example Classes </a></li>
    <li><a href="#Conclusions">Conclusions </a></li>
  </ul>
</ul>

<hr>




<h2><a name=Concepts>Concepts</a> </h2>

<p>Win32Forth uses the MOPS
metaphor for object oriented programming. That is you can define classes which
are used to create objects. Classes define data which is local to each
individual object it creates, and methods which are available to all the
objects it creates. here is an example of a simple class; </p>

<pre>    :Class Disk &lt;Super Object

                 int cylinders
                 int sectors
                 int b/sec
            32 bytes disk-name

            :M ClassInit:   ( -- )
                            0 to cylinders
                            0 to sectors
                            0 to b/sec      ;M

            :M !Attributes: ( cyl sec b/sec -- )
                            to b/sec
                            to sectors
                            to cylinders    ;M

            :M Attributes:  ( -- cyl sec b/sec )
                            cylinders
                            sectors
                            b/sec           ;M

            :M FreeBytes:   ( -- freebytes )
                            cylinders sectors * b/sec * ;M

          ;Class</pre>


<p>Now that we have define the class, we can create an object of the class as follows;</p>

<pre>        Disk myDisk1
        1024 32 512 !Attributes: myDisk1</pre>

<p>Here we have defined an
object called &quot;myDisk&quot;, and given this new disk the attributes of:
cylinders=1024, sectors=32, b/sec=512</p>

<p>So &quot;:Class&quot; and
&quot;;Class&quot; encompass a collection of data items and methods that define
and identify an object and the way it behaves. The word &quot;int&quot; defines
a local data item similar to a &quot;value&quot; that is local to each object
created by a class. A second data type available for use within a class is
&quot;bytes&quot;, which was used to create a buffer to hold the disk name.</p>

<p>The &quot;ClassInit:&quot;
method is special in the sense that it is automatically executed right after
the object is created. So it is a perfect place to initialize an object to the
common default values that are shared by all objects of this class.</p>

<p>Additional methods, (their
names always end with a ':' so they can be identified as methods) can be
defined in your class to initialize, display, calculate, or perform whatever
type of operation you will need to perform on the objects of this class.</p>




<h3><a name="Creating_and_Deleting_Dynamic_Objects">Creating and Deleting Dynamic Objects </a></h3>

<p>So far we have discussed
static objects, objects that reside in the application dictionary and always
consume space. Another way to create objects is to create them dynamically in
ALLOCATEd memory. Win32Forth provides a simple way to do this as follows; </p>

<pre>    NEW&gt; Disk ( -- a1 ) </pre>

<p>This creates an object of Class <code>Disk</code> , by allocating memory for the
object. Forth then executes the <code>ClassInit:</code>
method on the object, and returns a1 the address of the object on the Windows
heap. The objects address can then be saved in a variable, value or array for
use later in your program. To execute a method on the object, you need to put
its address into a variable or value like this. </p>

<pre>    0 value DiskObj
    : makeObj ( -- )
      NEW&gt; Disk to DiskObj ;

    makeObj                            \ make a Disk Object
    FreeBytes: DiskObj                 \ -- freebytes </pre>

<p>You can create as many dynamic objects as you want, within the constraints of
your available memory. When you are done with an object, you can dispose of it like this; </p>

<pre>    DiskObj Dispose                 \ dispose of the object
    0 to DiskObj                    \ clear the object holder </pre>

<p>It is always a good idea to
dispose of any dynamically created object once you are done using it. A special
method <code>~:</code> (tilde colon) is automatically executed before an object memory is released
to allow you a chance to do any needed cleanup before the objects is destroyed.
The <code>~:</code> method is defined as a noop in Class Object, but you can define it as
whatever you need when you create a new class that will have objects created
dynamically. </p>

<p>If you should happen to
forget to dispose of any of the dynamic objects you create, before your program
terminates, then Forth will automatically release their allocated memory at
program termination. </p>




<h3><a name="Building_Contiguous_Data_Fields_in_a_Cla">Building Contiguous Data Fields in a Class </a></h3>

<p>It is sometimes useful to
be able to define a series of data objects inside a class that will be laid
down next to each other in memory. This is often useful when you are trying to
build a data structure that will be passed to a Windows Procedure Call. Normally
Forth lays down data items in a class separated by an additional <code>CELL</code> that
holds the class pointer for the object. This makes it easy to decompile and
debug objects. If you don't mind limited debugging of a method containing the
previously described continuous data structure, then you can create them in
Win32Forth as follows; </p>

<p>Here is an example of a 'C' data structure; </p>

<pre>    typedef struct _WIN32_FIND_DATA {
           DWORD dwFileAttributes;
           FILETIME ftCreationTime;
           FILETIME ftLastAccessTime;
           FILETIME ftLastWriteTime;
           DWORD nFileSizeHigh;
           DWORD nFileSizeLow;
           DWORD dwReserved0;
           DWORD dwReserved1;
           TCHAR cFileName[ MAX_PATH ];
           TCHAR cAlternateFileName[ 14 ];
           WIN32_FIND_DATA;
           }</pre>

<p>Here is the equivalent Forth Class and data structure that can be used to get
files from the Windows Directory; </p>

<p>    :Class DirObject &lt;super object

          Record: FIND_DATA       \ returns the address of the structure
           int dwFileAttributes
          dint ftCreationTime
          dint ftLastAccessTime
          dint ftLastWriteTime
           int nFileSizeHigh
           int nFileSizeLow<
           int dwReserved0
           int dwReserved1
max-path bytes cFileName
      14 bytes cAlternateFileName
         ;Record<br>


<p> Note the instance variable defining words that are used between <code>Record:</code>
and <code>;Record</code> , words like; <code>int dint</code> and <code>bytes</code> . In
addition to these data types, Win32Forth now supports; <code>byte  bits</code> and
<code>short</code> . If you look at the file WINSER.F, you will see an example
of the use of these additional data types. Now we will continue including the source for
the rest of this example.<p>

<pre>    int findHandle

    :M ClassInit: ( -- ) \ init the structure
                  ClassInit: super
                  0   to dwFileAttributes
                  0.0 to ftCreationTime
                  0.0 to ftLastAccessTime
                  0.0 to ftLastWriteTime
                  0   to nFileSizeHigh
                  0   to nFileSizeLow
                  0   to dwReserved0<
                  0   to dwReserved1
                  cFileName off
                  cAlternateFileName off
                  -1 to findHandle
                  ;M</pre>
<pre>    :M FindFirst:    { adr len \ filename$ -- f }  \ f1=TRUE if found file<br>
                  max-path LocalAlloc: filename$
                  adr len filename$ place
                  filename$ +NULL
                  FIND_DATA rel&gt;abs
                  filename$ 1+ rel&gt;abs
                  FindFirstFile to findHandle
                  findHandle
                  ;M</pre>
<pre>    :M FindNext:    ( -- f )
                  FIND_DATA rel&gt;abs
                  findHandle Call FindNextFile
                  ;M</pre>
<pre>    :M FindClose:  ( -- f )     \ close the find when we are all done
                  findHandle
                  Call FindClose 0=
                  -1 to findHandle
                  ;M</pre>
<pre>    :M ShowFile:   ( -- )         \ display last found file
                  cFileName max-path 2dup 0 scan nip - type
                  ;M

    ;Class</pre>

<pr>    DirObject aFile       \ make an instance of the class DirObject

    : SIMPLEDIR ( -- )
            s" *.F" FindFirst: aFile
            if      begin   cr ShowFile: aFile
                            start/stop      \ pause if key pressed
                            FindNext: aFile 0=
                    until   cr
                    FindClose: aFile drop
            then    ; </pre>

<p>This last definition when
typed at the Forth command line, displays a list of the *.F files in the
current directory; </p>



<p>NOTE: <i>The above code
can be loaded into Win32Forth, by highlighting the lines you want to load, and
then press Ctrl+C (or use &quot;Copy&quot; in the Edit menu) to copy the text,
then select the Win32Forth console window, and press CTRL+V (or use &quot;Paste
to Keyboard&quot; in the Edit menu) to paste the text into Win32Forth. The
lines will be pasted one at a time to Win32Forth, which will compile them as if
you had typed them from the keyboard. After doing this, just type: <code>SIMPLEDIR
[enter]</code> you should see the program display a list of forth files in the current
directory. </i></p>


<hr>

<h2><a name="Advanced_Notes">Advanced Notes</a></h2>




<h3><a name="Object-Oriented_Programming_in_ANS_Forth">Object-Oriented Programming in ANS Forth [by
Andrew McKewan] </a></h3>

<p>This article describes the
use and implementation of an object-oriented extension to Forth. The extension
follows the syntax in Yerk and Mops but is implemented in ANS Standard Forth. </p>




<h4><a name="Why_I_am_doing_this">Why I am doing this </a></h4>

<p>When I first began
programming in Forth for Windows NT, I became aware of the huge amount of
complexity in the environment. In looking for a way to tame this complexity, I
studied the object-oriented Forth design in Yerk. Yerk is the Macintosh Forth
system that was formerly marketed as a commercial product under the name Neon. It
implemented an environment that allowed you to write object- oriented programs
for the Macintosh. </p>

<p>While much of Yerk was
Macintosh-specific, the underlying class/object/message ideas were quite
general. I ported these to Win32Forth, a public-domain Forth system for Windows
NT and Windows 95. </p>

<p>However, in both Yerk and
Win32Forth, much of the core system is written in assembly language and is very
machine-specific. Additionally, both systems modified the outer interpreter to
adapt to the new syntax. </p>

<p>What I hope to accomplish
here is to provide any ANS Forth System the ability to use the object-oriented
syntax and programming style in these platform- specific systems. In doing so,
I have sacrificed some performance and a few of the features. </p>

<h4><a name="Object-Oriented_Concepts">Object-Oriented Concepts</a> </h4>

<p>The object-oriented model
closely follows Smalltalk. I will first describe the names used in this model:
Objects, Classes, Messages, Methods, Selectors, Instance Variables and
Inheritance. </p>

<ul>
 <li>Objects are the entities that are used to
     build programs. Objects contain private data that is not accessible from
     outside the object. The only way to communicate with an object is by
     sending it a message. </li>
 <li>A Message consists of a selector (a name)
     and arguments. When an object receives the message, it executes a
     corresponding method. The arguments and results of this method are passed
     on the Forth stack. </li>
 <li>A Class is a template for creating
     objects. Classes describe the instance variables and methods for the
     object. Once a class is defined, you can make many object from that same
     class. Each object has its own copy of the instance variables, but share
     the method code. </li>
 <li>Instance variables are the private data
     belonging to an object. Instance variable can be accessed in the methods
     of the object, but are not visible outside the object. Instance variables
     are themselves objects with their own private data and public methods. </li>
 <li>Methods are the code that is executed in
     response to a message. They are similar to normal colon definitions but
     use a special syntax using the words :M and ;M. You can put any Forth code
     inside a method including sending messages to other objects. </li>
 <li>Inheritance allows you to define a class
     as a subclass of another class called the superclass. This new class
     &quot;inherits&quot; all of the instance variables and methods from the
     superclass. You can then add instance variable and methods to the new
     class. This can greatly decrease the amount of code you have to write if
     you design the class hierarchy carefully. </li>
</ul>




<h4><a name="How_to_Define_a_Class">How to Define a Class </a></h4>

<p>This example of a Point
class illustrates the basic syntax used to define a class: </p>

<pre>    :Class Point &lt;Super Object

    Var x
    Var y

    :M Get: ( -- x y ) Get: x Get: y ;M
    :M Put: ( x y -- ) Put: y Put: x ;M

    :M Print: ( -- ) Get: self SWAP ." x = " . ." y = " . ;M

    :M ClassInit: 1 Put: x 2 Put: y ;M

    ;Class</pre>

<p>The class Point inherits
from the class Object. Object is the root of all classes and defines some
common behaviour (such as getting the address of an object or getting its
class) but does not have any instance variables. All classes must inherit from
a superclass. </p>

<p>Next we define two instance
variables, x and y. Both of these are instances of class Var. Var is a basic
cell-sized class similar to a Forth variable. It has methods Get: and Put: to
fetch and store its data. </p>

<p>The Get: and Put: methods
of class Point access its data as a pair of integers. They are implemented by
sending Get: and Put: messages to the instance variables. Print: prints out the
x and y coordinates. </p>

<p>ClassInit: is a special
initialization method. Whenever an object is created, the system sends it a
ClassInit: message. This allows the object to perform any initialization functions.
Here we initialize the variables x and y to a preset value. Whenever a point is
created, it will be initialized to these values. This is similar to a
constructor in C++. </p>

<p>Not all classes need a
ClassInit: method. If a class does not define the ClassInit: method, there is
one in class Object that does nothing. </p>




<h4><a name="Creating_an_Instance_of_a_Class">Creating an Instance of a Class </a></h4>

<p>Now we have defined the Point class, let's create a point: </p>

<pre>    Point myPoint </pre>

<p>As you can see, Point is a
defining word. It creates a Forth definition called <code>myPoint</code>
Let's see what it contains: </p>

<pre>    Print: myPoint </pre>

<p>This should print the text
&quot;x = 1 y = 2&quot; on the screen. You can see that the new point has been
initialized with the <code>ClassInit:</code> message. </p>

<p>Now we can modify <code>myPoint</code> and we should see the new value: </p>

<pre>   3 4 Put: myPoint Print: myPoint </pre>

<p>Notice that in the
definition of Point, we created two instance variables of class Var. The object
defining words are &quot;class smart&quot; and will create instance variables
if used inside a class and global objects if used outside of a class. </p>




<h4><a name="Sending_Message_to_Yourself">Sending Message to Yourself </a></h4>

<p>In the definition of <code>Print:</code> we
used the phrase &quot;<code>Get:</code> self.&quot; Here we are sending the <code>Get:</code>
message to ourselves. <code>Self</code> is a name that refers to the
current object. The compiler will compile a call to <code>Point's Get:</code> method.
Similarly, we could have defined <code>ClassInit:</code> like this: </p>

<pre>   :M ClassInit: 1 2 Put: self ;M </pre>

<p>This is a common factoring technique in Forth and is equally applicable here. </p>




<h4><a name="Creating_a_Subclass">Creating a Subclass </a></h4>

<p>Let's say we wanted an object like <code>myPoint</code> , but that printed itself in
a different format. </p>

<pre>   :Class NewPoint &lt;Super Point
    :M Print: ( -- ) Get: self SWAP 0 .R .&quot; @&quot; . ;M
    ;Class </pre>

<p>A subclass inherits all of
the instance variables of its superclass, and can add new instance variables
and methods of its own, or override methods defined in the superclass. Now lets
try it out: </p>

<pre>    NewPoint myNewPoint
    Print: myNewPoint </pre>

<p>This will print
&quot;1@2&quot; which is the Smalltalk way of printing points. We have changed
the <code>Print:</code> method but have inherited all of the other
behaviour of a <code>Point</code> . </p>




<h4><a name="Sending_Message_to_Your_Superclass">Sending Message to Your Superclass </a></h4>

<p>In some cases, we do not
want to replace a method but just add something to it. Here's a class that
always prints its value on a new line: </p>

<pre>    :Class CrPoint &lt;Super NewPoint
    :M Print: ( -- ) CR Print: super ;M
    ;Class
    CrPoint myCrPoint Print: myCrPoint </pre>

<p>When we use the phrase
&quot;Print: super&quot; we are telling the compiler to send the print message
that was defined in our superclass. </p>




<h4><a name="Indexed_Instance_Variables">Indexed Instance Variables </a></h4>

<p>Class <code>Point</code> had
two named instance variables, &quot;x&quot; and &quot;y.&quot; The type and
number of named instance variables is fixed when the class is defined. Objects
may also contain indexed instance variables. These are accessed via a
zero-based index. Each object may define a different number of indexed index
variables. The size of each variable is defined in the class header by the word
<code>&lt;Indexed</code> . </p>

<pre>    :Class Array &lt;Super Object CELL &lt;Indexed
    At: ( index -- value ) (At) ;M To: ( value index -- ) (To) ;M
    ;Class </pre>

<p>We have declared that an <code>Array</code>
will have indexed instance variables that are each <code>CELL</code>
bytes wide. To define an array, put the number of elements before the class
name: </p>

<pre>    10 Array myArray </pre>

<p>This will define an Array
with 10 elements, numbered from 0 to 9. We can access the array data with the
At: and To: methods: </p>

<pre>    4 At: myArray .
    64 2 To: myArray </pre>

<p>Indexed instance variables
allow the creation of arrays, lists and other collections. </p>




<h4><a name="Early_vs._Late_Binding">Early vs. Late Binding </a></h4>

<p>In these examples, you may
have been thinking &quot;all of this message sending must be taking a lot of
time.&quot; In order to execute a method, an object must look up the message in
its class, and then its superclass, until it is found. </p>

<p>But if the class of the
object is known at compile time, the compiler does the lookup then and compiles
the execution token of the method. This is called &quot;early binding.&quot;
There is still some overhead with calling a method, but it is quite small. In
all of the code we have seen so far, the compiler will do early binding. </p>

<p>There are cases when you do
want the lookup to occur at runtime. This is called &quot;late binding.&quot;
An example of this is when you have a Forth variable that will contain a
pointer to an object, yet the class of the object is not known until runtime. The
syntax for this is: </p>

<pre>    VARIABLE objPtr myPoint objPtr !
    Print: [ objPtr @ ] </pre>

<p>The expression within the
brackets must produce an object address. The compiler recognized the brackets
and will do the message lookup at runtime. </p>

<p>(Don't worry, I haven't
redefined &quot;[&quot; or &quot;]&quot;. When a message selector recognizes
the left bracket, it uses <code>PARSE</code> and <code>EVALUATE</code> to compile the intermediate code
and then compiles a late-bound message send. This also works in interpret
state.) </p>




<h4><a name="Class_Binding">Class
Binding </a></h4>

<p>(Dave Boulton called this
&quot;promiscuous binding.&quot;) Class binding is an optimization that allows
us to get the performance of early binding when we have object pointers or
objects that are passed on the stack. If we use a selector with a class name,
the compiler will early bind the method, assuming that an object of that class
is on the stack. So if we write a word to print a point like this, </p>

<pre>    : .Point  ( aPoint -- ) Print: Point ;
    objPtr @ .Point </pre>

<p>it will early bind the
call. If you pass anything other that a Point, you will not get the expected
result (It will print the first two cells of the object, no matter what they
are). This is an optimization technique that should be used with care until a
program is fully debugged. </p>




<h4><a name="Creating_Objects_on_the_Heap">Creating Objects on the Heap </a></h4>

<p>If a system has dynamic
memory allocation, the programmer may want to create objects on the heap at
runtime. This may be the case, for instance, if the programmer does not know
how many objects will be created by the user of the application. </p>

<p>The syntax for creating an object on the heap is: </p>

<pre>    Heap&gt; Point objPtr ! </pre>

<p><code>Heap&gt;</code>
will return the address of the new point, which can be kept on the stack or
stored in a variable. To release the point and free its memory, we use: </p>

<pre>    objPtr @ Release </pre>

<p>Before the memory is freed,
the object will receive a <code>Release:</code> message. It can then do any cleanup
necessary (like releasing other instance variables). This is similar to a C++
destructor. </p>




<h4><a name=Implementation>Implementation</a></h4>

<p>The address of the current
object is stored in the value <code>^base</code> . (In a native system, this would be
a good use for a processor register.) </p>

<p>The only time you can use <code>^base</code> is
inside of a method. Whenever a method is called, <code>^base</code> is saved and loaded with the
address of the object being sent the message. When the method exits, <code>^base</code>
is restored. </p>




<h4><a name="Class_Structure">Class Structure </a></h4>

<p>All offsets and sizes are in Forth cells. </p>

<table>
  <thead>
    <tr>
      <th>Offset</th>
      <th>Size></th>
      <th>Name></th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>8</td>
      <td>MFA</td>
      <td>Method dictionary (8-way hashed list)</td>
    </tr>
    <tr>
      <td>8</td>
      <td>1</td>
      <td>IFA</td>
      <td>Linked-list of instance variables</td>
    </tr>
    <tr>
      <td>9</td>
      <td>1</td>
      <td>DFA</td>
      <td>Data length of named instance variables</td>
    </tr>
    <tr>
      <td>10</td>
      <td>1</td>
      <td>XFA</td>
      <td>Width of indexed instance variables</td>
    </tr>
    <tr>
      <td>11</td>
      <td>1</td>
      <td>SFA</td>
      <td>Superclass pointer</td>
    </tr>
    <tr>
      <td>12</td>
      <td>1</td>
      <td>TAG</td>
      <td>Class tag field</td>
    </tr>
    <tr>
      <td>13</td>
      <td>1</td>
      <td>USR</td>
      <td>User-defined field</td>
    </tr>
  </tbody>
</table>

<p>The first 8 cells are an
8-way hashed list of methods. Three bits from the method selector are used to
determine which list the method may be in. This cuts down search time for
late-bound messages. </p>

<p>The IFA field is a linked
list of named instance variables. The last two entries in this list are always
&quot;self&quot; and &quot;super.&quot; </p>

<p>The DFA field contains the
length of the named instance variables for an object. </p>

<p>The XFA field actually
serves a dual role. For classes with indexed instance variables it contains the
width of each element. For non-indexed classes this field is usually zero. A
special value of -1 is a flag for general classes (see below). </p>

<p>The TAG field contains a
special value that helps the compiler determine if a structure really
represents a class. In native implementations, a unique code field is used to
identify classes, but this is not available in ANS Forth. </p>

<p>The USR field is not used
by the compiler but is reserved for a programmer's use. In the future I may
extend this concept of &quot;class variables&quot; to allow adding to the class
structure. This field is used in a Windows implementation to store a list of
window messages the class will respond to. </p>




<h4><a name="Object_Structure">Object Structure </a></h4>
<p></p>
<table>
  <thead>
    <tr>
      <th>Offset</th>
      <th>Size></th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>1</td>
      <td>Pointer to object's class</td>
    </tr>
    <tr>
      <td>1</td>
      <td>DFA</td>
      <td>Named instance variable data</td>
    </tr>
    <tr>
      <td>DFA+1</td>
      <td>1</td>
      <td>Number of indexed instance variables (if indexed)</td>
    </tr>
    <tr>
      <td>DFA+2</td>
      <td>?</td>
      <td>Indexed instance variables (if indexed)</td>
    </tr>
  </tbody>
</table>

<p>The first field of a global
or heap-based object is a pointer to the object's class. This allows us to do
late binding. Normally, the class field is not stored for an instance variable.
This saves space and is not usually needed because the compiler knows the class
of the instance variable and the instance variable is not visible outside of
the class definition. For indexed classes, the class pointer is always stored
because the class contains information needed to locate the indexed data. Also,
the programmer may mark a class as &quot;general&quot; so that the class
pointer is always stored. This is needed in cases where the object sends itself
late-bound messages (i.e. msg: [ self ]). </p>

<p>When an object executes, it
returns the address of the first named instance variable. This is what we refer
to when we mean the &quot;object address.&quot; This field contains the named
instance variable data. Since instance variables are themselves objects, this
structure can be nested indefinitely. </p>

<p>Objects with indexed
instance variables have two more fields. The indexed header contains the number
of indexed instance variables. The width of the indexed variables is stored in
the class structure which is why we must always store a class pointer for
indexed objects. </p>

<p>Following the indexed
header is the indexed data. The size of this area is the product of the indexed
width and the number of elements. There are primitives defined to access this
data area. </p>




<h4><a name="Instance_Variable_Structure">Instance Variable Structure </a></h4>
<p></p>
<table>
  <thead>
    <tr>
      <th>Offset</th>
      <th>Size></th>
      <th>Name></th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>1</td>
      <td>link</td>
      <td>points to link of next ivar in chain</td>
    </tr>
    <tr>
      <td>1</td>
      <td>1</td>
      <td>name</td>
      <td>hash value of name</td>
    </tr>
    <tr>
      <td>2</td>
      <td>1</td>
      <td>class</td>
      <td>pointer to class</td>
    </tr>
    <tr>
      <td>3</td>
      <td>1</td>
      <td>offset</td>
      <td>offset in object to start of ivar data</td>
    </tr>
    <tr>
      <td>4</td>
      <td>1</td>
      <td>#elem</td>
      <td>number of elements (indexed ivars only)</td>
    </tr>
  </tbody>
</table>

<p>The link field points to
the next instance variable in the class. The head of this list is the IFA field
in the class. When a new class is created, all the class fields are copied from
the superclass and so the new class starts with all of the instance variables
and methods from the superclass. </p>

<p>The name field is a hash
value computed from the name of the instance variable. This could be stored as
a string with a space and compile-time penalty. But with a good 32-bit hash
function collisions are not common. In any event, the compiler will abort if
you use a name that collides with a previous name. You can rename your instance
variable or improve the hash function. </p>

<p>Following the name is a
pointer to the class of the instance variable. The compiler will always
early-bind messages sent to instance variables. </p>

<p>The offset field contains
the offset of this instance variable within the object. When sending a message to
an object, this offset is added to the current object address. </p>

<p>If the instance variable is
indexed, the number of elements is stored next. This field is not used for
non-indexed classes. </p>

<p>Unlike objects, instance
variables are not names in the Forth dictionary. Correspondingly, you cannot
execute them to get their address. You can only send them messages. If you need
an address, you can use the Addr: method defined in class Object. </p>




<h4><a name="Method_Structure">Method Structure </a></h4>

<p>Methods are stored in an
8-way linked-list from the MFA field. Each method is identified by a 32-bit
selector which is the parameter field address of the message selector. </p>

<table>
  <thead>
    <tr>
      <th>Offset</th>
      <th>Size></th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>1</td>
      <td>Link to next method</td>
    </tr>
    <tr>
      <td>1</td>
      <td>1</td>
      <td>Selector</td>
    </tr>
    <tr>
      <td>2</td>
      <td>1</td>
      <td>Method execution token</td>
    </tr>
  </tbody>
</table>

<p>The code for a method is
created with the Forth word <code>:NONAME</code> . In this implementation it contains
no special prolog or epilog code. When the method executes, the current object
will be in <code>^base</code> . Method execution is done by the following word that saves the current
object pointer and loads it from the stack, calls the method, and then restores
the object pointer. </p>

<pre>    : EXECUTE-METHOD ( ^obj xt -- )
                     ^base &gt;R SWAP TO ^base EXECUTE R&gt; TO ^base ; </pre>

<p>When a method is compiled
into a definition, the object and execution token are compiled as literals
followed by <code>EXECUTE-METHOD</code> . </p>

<p>This represents the
overhead for calling a method over a normal colon definition. (This was one of
the concessions I made to ANS Forth. In the native versions, a fast code word
at the start and end of a method performed a similar action, making the
overhead negligible.) </p>

<p>When a message is sent to
an instance variable, the method execution token and variable offset are
compiled as a literals followed by <code>EXECUTE-IVAR</code></p>

<pre>    : EXECUTE-IVAR ( xt offset -- )
                   ^base &gt;R ^base + TO ^base EXECUTE R&gt; TO ^base ; </pre>

<p>An optimization is made if
the offset is zero (for messages to self and super and the first named instance
variable). Since we do not need to change <code>^base</code> we just compile the execution token
directly. </p>




<h4><a name="Selectors_are_Special_Words">Selectors are Special Words </a></h4>

<p>In the Yerk implementation,
the interpreter was changed (by vectoring <code>FIND</code> ) so that it automatically
recognized words ending in &quot;:&quot; as a message to an object. It computed
a hash value from the message name and used this as the selector. This kept the
dictionary small. </p>

<p>In ANS Forth, there is no
way to modify the interpreter (short of writing a new one). It has also been
argued whether this is a &quot;good thing&quot; anyway. </p>

<p>In this implementation,
messages selectors are immediate Forth words. They are created automatically
the first time they are used in a method definition. Since they are unique
words, we use the parameter field of the word as the selector. </p>

<p>When the selector executes
it compiles or executes code to send a message to the object that follows. If
used inside a class, it first looks to see if the word is one of the named
instance variables. If not, it sees if it is a valid object. Lastly it sees if
it is a class name and does class binding. </p>

<p>Yerk also allowed sending
messages to values and local variables and automatically compiled late-bound
calls. In ANS Forth, we cannot tell anything about these words from their
execution token, so this feature is not implemented. We can achieve the same
effect by using explicit late binding: </p>

<pre>    Message: [ aValue ] </pre>




<h4><a name="Object_Initialization">Object Initialization </a></h4>

<p>When an object is created,
it must be initialized. The memory for the object is cleared to zero and the
class pointer and indexed header are set up. Then each of the named instance
variables is initialized. </p>

<p>This is done with the
recursive word <code>ITRAV</code> . It takes the address of an instance variable
structure and an offset and follows the chain, initializing each of the named
instance variables in the class and sending it a <code>ClassInit:</code> message. As it goes it recursively
initializes that instance variable's instance variables, and so on. </p>

<p>Finally, the object is sent
a <code>ClassInit:</code> message. This same process is followed when an
object is created from the heap. </p>




<h4><a name="Example_Classes">Example Classes </a></h4>

<p>I have implemented some
simple classes to serve as a basis for your own class library. These classes
have similar names and methods to the predefined classes in Yerk and Mops. The
code for the class implementation and sample classes is available from the <img
border=0 width=16 height=16 id="_x0000_i1028" src=ONWEB.gif>
 <a href="ftp://ftp.forth.org/pub/Forth/ANS/CLASS01.ZIP">Fig ftp site</a>. </p>




<h4><a name=Conclusions>Conclusions </a></h4>

<p>For me, the primary benefit
of using objects is in managing complexity. Objects are little bundles of data
that understand and act on messages sent by other parts of the program. By
keeping the implementation details inside the object, it appears simpler to the
rest of the program. Inheritance can help reduce the amount of code you have to
write. If a mature class library is available, you can often find needed
functionality already there. </p>

<p>If the Forth community
could agree on a object-oriented model, we could begin to assemble an
object-oriented Forth library similar to the Forth Scientific Library project
headed by Skip Carter, code and tools that all Forth programmers can share. That
project had not been possible before the ANS standardization of floating-point
in Forth. </p>

<p>Unfortunately, there are
many different ways to add objects to Forth. Just look at the number of
articles on object-oriented programming that have appeared in Forth Dimensions
over the past ten years. Because Forth is so easy (and fun) to modify and
extend, everybody ends up doing it their own (different) way. </p>

<p>Andrew McKewan</p>

<hr>

<p>Document : w32f-objects.htm -- 2006/03/13 -- georgeahubert</p>

</body>

</html>
