<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"
    "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<meta name="GENERATOR" content="DexH v03" />
<title>
paths.f</title>
<link rel="stylesheet" type="text/css" href="style.css">
</head>
<body>
<h1>Paths -- Multiple search path support
</h1><h2>Glossary
</h2><p><b><code>: .program &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( -- )
</code></b><br>Type the program path.
</p><p><b><code>: .forthdir &nbsp;&nbsp;&nbsp;&nbsp;( -- )
</code></b><br>Type the forth directory.
</p><p><b><code>: &quot;chdir &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( a1 n1 -- )
</code></b><br>Set the current directory.
</p><p><b><code>: .dir &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( -- )
</code></b><br>Print the current directory.
</p><p><b><code>: chdir &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( -&lt;optional_new_directory&gt;- -- )
</code></b><br>Set the current directory.
</p><p><b><code>: path: &nbsp;( -- )
</code></b><br>Defines a directory search path. <br />
The first cell holds a pointer to 2 cells in the user area which are used to handle a search path. <br />
The next 260 bytes are reserved for a counted string of a path. <br />
followed by null. <br />
At runtime it returns address of the counted string of a path.
</p><p><b><code>: path-source &nbsp;&nbsp;( path &nbsp;-- 2variable_path-source )
</code></b><br>Path-source points to a substring in a path. <br />
Path-source returns this address.
</p><p><b><code>: next-path&quot; &nbsp;&nbsp;&nbsp;( path -- a1 n1 &nbsp;) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\ w32f path
</code></b><br>Get the next path from dir list.
</p><p><b><code>: reset-path-source &nbsp;&nbsp;&nbsp;&nbsp;( path -- &nbsp;) &nbsp;&nbsp;&nbsp;\ w32f path
</code></b><br>Points the path-source to the whole path.
</p><p><b><code>: first-path&quot; &nbsp;&nbsp;( path -- a1 n1 &nbsp;) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\ w32f path
</code></b><br>Get the first forth directory path.
</p><p><b><code>: &quot;path+ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( a1 n1 path -- ) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\ w32f path
</code></b><br>Append a directory to a path.
</p><p><b><code>: .path &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( path -- ) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\ w32f path system
</code></b><br>Display a directory search path list.
Note: The path source will be reset for this path.
</p><p><b><code>: full-path &nbsp;&nbsp;&nbsp;&nbsp;{ a1 n1 path \ searchpath$ filename$ current$ -- a2 n2 f1 }
</code></b><br>Find the file <i>&nbsp;a1,n1 </i>&nbsp;in the path <i>&nbsp;path </i>&nbsp;and return the full path.
<i>&nbsp;a2,n2 </i>&nbsp;. <i>&nbsp;f1 </i>&nbsp;= false if successful.
</p><p><b><code>: find-path &nbsp;&nbsp;&nbsp;&nbsp;{ a1 n1 basepath path \ filename$ current$ search-current$ -- a2 n2 f1 }
</code></b><br>Find the file <i>&nbsp;a1,n1 </i>&nbsp;in the path <i>&nbsp;basepath </i>&nbsp;by scanning the sub folders
defined in <i>&nbsp;path </i>. Returns the full path of the file if possible.
<i>&nbsp;a2,n2 </i>&nbsp;. <i>&nbsp;f1 </i>&nbsp;= false if succeeded.
</p><p><b><code>path: search-base-path &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\ w32f path
</code></b><br>The path buffer for the base search folders for Forth.<br />
Applications that let Forth compile should not change it.
</p><p><b><code>path: search-path &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\ w32f path
</code></b><br>The path buffer for the sub folders to search in.
Applications that let Forth compile should not change it.
</p><p><b><code>: &quot;fbase-path+ &nbsp;( a1 n1 -- ) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\ w32f path
</code></b><br>Append a directory to the Forth search base path.
</p><p><b><code>: &quot;fpath+ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( a1 n1 -- ) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\ w32f path
</code></b><br>Append a directory to the Forth search path.
</p><p><b><code>: fbase-path+ &nbsp;&nbsp;( -&lt;directory&gt;- -- ) &nbsp;&nbsp;&nbsp;\ w32f path system
</code></b><br>Append a directory to the Forth search base path.
</p><p><b><code>: fpath+ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( -&lt;directory&gt;- -- ) &nbsp;&nbsp;&nbsp;\ w32f path system
</code></b><br>Append a directory to the Forth search path.
</p><p><b><code>: .fpath &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( -- ) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\ w32f path system
</code></b><br>Display the Forth directory search path list.
</p><p><b><code>: program-path-init ( -- )
</code></b><br>Initialize the Forth directory search path list. Automatically done at program
initialization and when Paths.f is loaded.
</p><p><b><code>: &quot;path-file &nbsp;&nbsp;&nbsp;( a1 n1 -- a2 n2 f1 )
</code></b><br>Find file a1,n1 in the Forth search path and return the full path. <br />
a2,n2 and f1=false, succeeded.
</p><p><b><code>: n&quot;open &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( a1 n1 -- handle f1 )
</code></b><br>Open file a1,n1 with a Forth path search.
</p><p><b><code>: MakeAbsolutePath &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( a1 n1 a2 n2 -- a3 )
</code></b><br>Make path a1 n1 absolute to path a2 n2.
</p><p><b><code>: IsPathRelativeTo? &nbsp;&nbsp;&nbsp;&nbsp;{ a1 n1 a2 n2 -- f }
</code></b><br>Return true if path a1 n1 is relative to path a2 n2
</p><p><b><code>: MakePathRelativeTo &nbsp;&nbsp;&nbsp;( a1 n1 a2 n2 -- a3 )
</code></b><br>Make path a1 n1 relative to path a2 n2.
</p><p><b><code>: FindRelativePath &nbsp;( a1 n1 path - a2 n2 )
</code></b><br>Returns a relative path for file a1 n1 in path ( first part ). <br />
n2=0 means not in search path.
</p><p><b><code>: FindRelativeName &nbsp;( a1 n1 path - a2 n2 f )
</code></b><br>Returns a relative name for file a1 n1 in path ( last-part ). <br />
n2=0 means not in search path.
</p><p><b><code>: &quot;LOADED? &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( addr len -- flag )
</code></b><br>True if a file addr len is loaded. The filename must contain a full path.
</p><p><b><code>: LOADED? &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( -&lt;name&gt;- -- flag ) &nbsp;{ \ current$ }
</code></b><br>True if the following file is loaded. The filename may be relative.
</p><p><b><code>: \LOADED- &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( -&lt;name&gt;- )
</code></b><br>If the following file IS NOT LOADED interpret line.
</p><p><b><code>: \LOADED &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( -&lt;name&gt;- )
</code></b><br>&nbsp;If the following file IS LOADED interpret line.
</p><p><b><code>: NEEDS &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( -&lt;name&gt;- )
</code></b><br>Conditionally load file &quot;name&quot; if not loaded.
</p><p><b><code>: Require &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\ synonym of NEEDS
</code></b><br>Forth 200X name for needs.
</p><p><b><code>: Required &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( addr len -- )
</code></b><br>Non parsing version of Require.
</p><p><b><code>: &quot;file-clip&quot; &nbsp;&nbsp;{ addr len limit | temp$ pre -- addr len2 }
</code></b><br>Clip filename to limit. If limit is less than 20 then the filename is clipped to
20. len2=len if len &lt;&nbsp;limit or len &lt;&nbsp;20. len2 = 20 if limit &lt;&nbsp;20. len2 = limt
otherwise. The string (if clipped) contains ... in the middle to indicate that#
it has been clipped.
</p></body></html>
