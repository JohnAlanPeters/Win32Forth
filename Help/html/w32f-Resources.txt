RESOURCES
*********

To include resources in your 32-bit Windows application, do the following: 

1. Create individual resource files for cursors, icons, bitmaps, dialog boxes, and fonts. 
   To do this, you can use Microsoft Image Editor and Dialog Editor (IMAGEDIT.EXE and 
   DLGEDIT.EXE) and Microsoft Windows Font Editor (FONTEDIT.EXE).

2. Create a text resource-definition file (script) that describes all the resources used 
   by the application.

3. Compile the script into a resource (.RES) file with RC.

4. Link the compiled resource files into the application's executable file.


The script lists every resource in your application and describes some types of resources 
in great detail. For a resource that exists in a separate file, such as an icon or cursor,
the script names the resource and the file that contains it. For some resources, such as a
menu, the entire definition of the resource exists within the script.


RC
**

Where to be found ? MIcrosoft product ? included in operating system ?


To start RC, use the RC command. The following line shows RC command-line syntax: 

RC [options] script-file

Options 

/?   Displays a list of RC command-line options.

/d   Defines a symbol for the preprocessor that you can test with the #ifdef directive.

/foresname Uses resname for the name of the .RES file.

/i   Searches the specified directory before searching the directories specified by 
     the INCLUDE environment variable.

/lcodepage Specifies default language for compilation. For example, -l409 is equivalent 
     to including the following statement at the top of the resource script file:
     LANGUAGE LANG_ENGLISH,SUBLANG_ENGLISH_US 


/v   Displays messages that report on the progress of the compiler.

/x   Prevents RC from checking the INCLUDE environment variable when searching for header
     files or resource files.

 

SCRIPT FILE
***********

A script file can contain the following types of information:

· Preprocessing directives, which instruct RC to perform actions on the script before
  compiling it. Directives can also assign values to names.
· Statements, which name and describe resources.

The syntax and semantics for the RC preprocessor are the same as for the preprocessor in a C compiler. Single-line comments begin with two forward slashes (//) and run to the end of the line. Block comments begin with an opening delimiter (/*) and run to a closing delimiter (*/). Comments do not nest.

You use the #define directive to define symbols for your resource identifiers in a header file. You include this header both in the resource script and your application source code. Similarly, the values for attributes and styles are defined by including the C header files for Windows.

PREPROCESSING DIRECTIVES
------------------------

#define	 Defines a specified name by assigning it a given value.
         Ex: #define IDM_GTROPEN 2002  /* menu open of GTR programm */
             #define     USERCLASS   "MyControlClass" 
#include Copies the contents of a file into the resource-definition file.
         Can be used to include the same header file as in the applicaio,
         #include "headers\mydefs.h" 
Other directives : #elif #else #endif #if #ifdef #ifndef #undef	

STATEMENTS
----------

A single-line statement can begin with any of the following keywords: 

BITMAP	Defines a bitmap by naming it and specifying the name of the file that contains it.
        (To use a particular bitmap, the application requests it by name.)
CURSOR	Defines a cursor by naming it and specifying the name of the file that contains it.
        (To use a particular cursor, the application requests it by name.)
FONT	Specifies the name of a file that contains a font.
ICON	Defines an icon by naming it and specifying the name of the file that contains it.
        (To use a particular icon, the application requests it by name.)
LANGUAGE Sets the language for all resources up to the next LANGUAGE statement or to the 
        end of the file. When the LANGUAGE statement appears before the BEGIN in an
        ACCELERATORS, DIALOG, MENU, RCDATA, or STRINGTABLE resource definition, the 
        specified language applies only to that resource.
MESSAGETABLE Defines a message table by naming it and specifying the name of the file that
        contains it. The file is a binary resource file generated by the Message Compiler.


A multiline statement can begin with any of the following keywords: 

ACCELERATORS Defines menu accelerator keys.
DIALOG	     Defines a template that an application can use to create dialog boxes.
MENU	     Defines the appearance and function of a menu.
RCDATA	     Defines data resources. Data resources let you include binary data in 
             the executable file.
STRINGTABLE  Defines string resources. String resources are Unicode strings that can 
             be loaded from the executable file.

Each of these multiline statements allows optional statements before the BEGIN ... END block that defines the resource. The only interesting optional statement is:
LANGUAGE language, sublanguage	Specifies the language for the resource. The parameters are constants from WINNLS.H.


EXAMPLE
-------

#include "SHAPES.H"

ShapesCursor  CURSOR  SHAPES.CUR  //filename
ShapesIcon    ICON    SHAPES.ICO

ShapesMenu    MENU
    BEGIN
        POPUP "&Shape"
            BEGIN
                MENUITEM "&Clear", ID_CLEAR
                MENUITEM "&Rectangle", ID_RECT
                MENUITEM "&Triangle", ID_TRIANGLE
                MENUITEM "&Star", ID_STAR
                MENUITEM "&Ellipse", ID_ELLIPSE
            END
    END 
//The menu identifiers ID_CLEAR etc are defined in the application header file, SHAPES.H.
//This id is returned when the user clicks on this option

//The menuID is ShapesMenu. This value is either a unique string or a unique 16-bit 
//unsigned integer value in the range of 1 to 65,535.


MORE DETAILED STATEMENTS SYNTAX
-------------------------------

Parameters :

nameID     Specifies either a unique name or a 16-bit unsigned integer value identifying 
           the resource.

lfilename  must be a full path if the file is not in the current working directory. The 
           path can either be a quoted or nonquoted string.




nameID BITMAP filename    Rq: use LoadBitMap
nameID CURSOR filename    Rq: Icon and cursor resources can contain more than one image.
nameID FONT filename      Rq: here, nameID must be number
nameID ICON filename      Rq: Icon and cursor resources can contain more than one image.
LANGUAGE language, sublanguage
                          The LANGUAGE statement sets the language for all resources up 
                          to the next LANGUAGE statement or to the end of the file. When 
                          the LANGUAGE statement appears before the BEGIN in an ACCELERATORS,
                          DIALOG, MENU, RCDATA, or STRINGTABLE resource definition, the
                          specified language applies only to that resource.
                          language    must be one of the constants from WINNLS.H
                          sublanguage must be one of the constants from WINNLS.H
nameID MESSAGETABLE filename  This statement defines the ID and file of an application's
                          message table resource. Message tables are special string 
                          resources used in event logging and with the FormatMessage 
                          function. The file contains a binary message table generated by 
                          the Message Compiler. 


acctablename ACCELERATORS
[LANGUAGE language, sublanguage]     //optional
BEGIN
    event, idvalue, [type] [options]
    . . .
END
Defines one or more accelerators for an application. An accelerator is a keystroke defined by the application to give the user a quick way to perform a task. The TranslateAccelerator function is used to translate accelerator messages from the application queue into WM_COMMAND or WM_SYSCOMMAND messages. 



menuID MENU
[ LANGUAGE language, sublanguage ]
BEGIN
    item-definitions
    . . .
END
Example:
sample MENU
BEGIN
     MENUITEM "&Soup", 100
     MENUITEM "S&alad", 101
     POPUP "&Entree"
     BEGIN
          MENUITEM "&Fish", 200
          MENUITEM "&Chicken", 201, CHECKED
          POPUP "&Beef"
          BEGIN
               MENUITEM "&Steak", 301
               MENUITEM "&Prime Rib", 302
          END
     END
     MENUITEM "&Dessert", 103
END 
MENUITEM text, resultifclicked, [CHECKED GRAYED HELP INACTIVE MENUBARBREAK MENUBREAK]
MENUITEM SEPARATOR
POPUP text, [CHECKED GRAYED INACTIVE MENUBARBREAK MENUBREAK ]


nameID RCDATA
[LANGUAGE language, sublanguage]     //optional
BEGIN
    raw-data
    . . .
END
The RCDATA statement defines a raw data resource for an application. Raw data resources permit the inclusion of binary data directly in the executable file.
Example
resname RCDATA
BEGIN
   L"Here is a Unicode string\0", /* A Unicode string. Note: explicitly
                                 null-terminated */
   1024,                  /* int        */
   0x029a,                /* hex int    */
   0o733,                 /* octal int  */
   "\07"                  /* octal byte */
END 


STRINGTABLE
[LANGUAGE language, sublanguage]     //optional
BEGIN
    stringID string
    . . .
END
The STRINGTABLE statement defines one or more string resources for an application. String resources are simply null-terminated Unicode strings that can be loaded when needed from the executable file, using the LoadString function.
Example
#define IDS_HELLO    1   //string ids must be unsigned 16-bit integer 
#define IDS_GOODBYE  2
STRINGTABLE
BEGIN
    IDS_HELLO,   "Hello"
    IDS_GOODBYE, "Goodbye"
END 



nameID DIALOG [ load-mem] x, y, width, height
[ CAPTION "text"
  CLASS class     16-bit unsigned integer or string that identifies the class of the dialog
                  should only be used with special cases, because it overrides the normal
                  processing of a dialog box. 
  LANGUAGE language,sublanguage
  STYLE styles                      Do not use the WS_CHILD style with a modal dialog box
  EXSTYLE=extended-styles ]
BEGIN
    control-statement
    . . .
END
The DIALOG statement defines a window that an application can use to create dialog boxes. The statement defines the position and dimensions of the dialog box on the screen as well as the dialog box style.
Example
#include <windows.h>
ErrorDialog DIALOG  10, 10, 300, 110
STYLE WS_POPUP|WS_BORDER
CAPTION "Error!" 
BEGIN
    CTEXT "Select One:", 1, 10, 10, 280, 12
    PUSHBUTTON "&Retry", 2, 75, 30, 60, 12
    PUSHBUTTON "&Abort", 3, 75, 50, 60, 12
    PUSHBUTTON "&Ignore", 4, 75, 80, 60, 12
END 

Controls in dialogs :

PUSHBOX text, id, x, y, width, height [ BS_PUSHBOX WS_TABSTOP WS_DISABLED WS_GROUP[, extended-style]]

PUSHBUTTON text, id, x, y, width, height [ BS_PUSHBUTTON WS_TABSTOP WS_DISABLED WS_GROUP [, extended-style]]

RADIOBUTTON text, id, x, y, width, height [BUTTON-class styles WS_TABSTOP WS_DISABLED WS_GROUP [, extended-style]]

LTEXT text, id, x, y, width, height [, style [, extended-style]]

CTEXT text, id, x, y, width, height [, style [, extended-style]]

LISTBOX text, id, x, y, width, height [, style [, extended-style]]

GROUPBOX text, id, x, y, width, height [, style [, extended-style]]

EDITTEXT text, id, x, y, width, height [, style [, extended-style]]

DEFPUSHBUTTON text, id, x, y, width, height [, style [, extended-style]]

etc




FINDING AND LOADING RESOURCES
*****************************

Before using a resource, an application must load it into memory.
 
The FindResource and FindResourceEx functions find a resource in a module and return a 
handle to the binary resource data. FindResource locates a resource by type and name. FindResourceEx locates the resource by type, name, and language. 

The LoadResource function uses the resource handle returned by FindResource to load the resource into memory. After an application loads a resource by using LoadResource, Windows automatically unloads and reloads the resource as memory conditions and application execution require. Thus, an application need not explicitly unload a resource it no longer needs. 

An application can use FindResource and LoadResource to find and load any type of resource, but these functions should be used only if the application must access the binary resource data for subsequent function calls. To use a resource immediately, an application should use one of the following resource-specific functions to find and load resources in one call. 

Function	Action
FormatMessage	Loads and formats a message-table entry.
LoadAccelerators	Loads an accelerator table.
LoadBitmap	Loads a bitmap resource.
LoadCursor	Loads a cursor resource.
LoadIcon	Loads an icon resource.
LoadImage	Loads an icon, cursor, bitmap, or enhanced metafile  resource.
LoadMenu	Loads a menu resource.
LoadString	Loads a string-table entry.
 

Before terminating, an application should release the memory occupied by accelerator tables, bitmaps, cursors, icons, and menus by using one of the functions in the following table. 

Resource	Release function
Accelerator table	DestroyAcceleratorTable
Bitmap	DeleteObject
Cursor	DestroyCursor
Icon	DestroyIcon
Menu	DestroyMenu
 
When the application terminates, Windows automatically releases the memory occupied by the other types of resources. 




HBITMAP LoadBitmap(

    HINSTANCE hInstance,	// handle of application instance 
    LPCTSTR lpBitmapName 	// address of bitmap resource name 
   );	

 
HICON LoadIcon(

    HINSTANCE hInstance,	// handle of application instance
    LPCTSTR lpIconName 	// icon-name string or icon resource identifier
   );	
 


HANDLE LoadImage(

    HINSTANCE hinst, 	// handle of the instance that contains the image
    LPCTSTR lpszName,	// name or identifier of image
    UINT uType,	// type of image
    int cxDesired,	// desired width
    int cyDesired,	// desired height
    UINT fuLoad	// load flags
   );	


HMENU LoadMenu(

    HINSTANCE hInstance,	// handle of application instance
    LPCTSTR lpMenuName	// menu name string or menu-resource identifier  
   );	


HANDLE RESOURCE IN EXE
**********************


The BeginUpdateResource function returns a handle that can be used by the UpdateResource function to add, delete, or replace resources in an executable file. 

HANDLE BeginUpdateResource(

    LPCTSTR pFileName,	// pointer to file in which to update resources  
    BOOL bDeleteExistingResources	// deletion option
   );	


BOOL EnumResourceNames(

    HINSTANCE hModule,	// resource-module handling 
    LPCTSTR lpszType,	// pointer to resource type 
    ENUMRESNAMEPROC lpEnumFunc,	// pointer to callback function 
    LONG lParam 	// application-defined parameter 
   );	
 
